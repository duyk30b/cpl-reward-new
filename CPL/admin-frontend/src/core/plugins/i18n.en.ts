import { ImageProcessDetailTab } from '@/components/user/image-process-result/image-process-detail.const'
import { CampaignStatus } from '@/core/data/campaign/campaign'
import { MissionStatus } from '@/core/data/campaign/mission'
import {
  OrderMode,
  OrderSide,
  OrderType,
  PositionSide,
  UserType,
} from '@/core/variables/futures.enum'
import { ReasonCategoryTypeEnum } from '@/enums/user-reason.enum'
import { TRANSACTION_QUEUE_STATUS } from '@/models/hot-wallet/HotWalletType'
import {
  UserAuthenticatorVerifyStatus,
  UserInfoStatus,
  UserStatus,
} from '@/models/user/User'
import { Gender } from '@/models/user/UserInfo'
import {
  KycIdDocumentMetadata,
  KycIdDocumentType,
  KycStatus,
  KycType,
  RiskRating,
} from '@/models/user/UserKyc'
import {
  DuplicateFaceStatus,
  IdentityDocumentVerificationStatus,
  KycImageProvider,
  LivenessStatus,
  OcrStatus,
} from '@/models/user/UserKycScanData'
import { Feature, Permission, Screen } from '../variables/common.enum'
import { UserBlacklistHistoryType } from '@/models/user/UserBlacklistHistory.enum'

export const messagesEn = {
  home: 'Home',
  back: 'Back',
  submissionDate: 'Submission date',
  dashboard: 'Dashboard',
  layoutBuilder: 'Layout builder',
  craft: 'Crafted',
  pages: 'Pages',
  profile: 'Profile',
  profilePermissionDescription:
    'List of permissions in the system. The permissions you are allowed are checked boxes.',
  profileOverview: 'Overview',
  projects: 'Projects',
  campaigns: 'Campaigns',
  channels: 'Channels',
  documents: 'Documents',
  connections: 'Connections',
  wizards: 'Wizards',
  horizontal: 'Horizontal',
  vertical: 'Vertical',
  account: 'Account',
  accountOverview: 'Overview',
  settings: 'Settings',
  authentication: 'Authentication',
  basicFlow: 'Basic Flow',
  signIn: 'Sign-in',
  signUp: 'Sign-up',
  passwordReset: 'Password Reset',
  error404: 'Error 404',
  error500: 'Error 500',
  apps: 'Apps',
  chat: 'Chat',
  privateChat: 'Private Chat',
  groupChat: 'Group Chat',
  drawerChat: 'Drawer Chat',
  widgets: 'Widgets',
  widgetsLists: 'Lists',
  widgetsStatistics: 'Statistics',
  widgetsCharts: 'Charts',
  widgetsMixed: 'Mixed',
  widgetsTables: 'Tables',
  widgetsFeeds: 'Feeds',
  changelog: 'Changelog',
  docsAndComponents: 'Docs & Components',
  megaMenu: 'Mega Menu',
  exampleLink: 'Example link',
  modals: 'Modals',
  general: 'General',
  inviteFriends: 'Invite Friends',
  viewUsers: 'View Users',
  userBlacklistHistory: 'Blacklist History',
  upgradePlan: 'Upgrade Plan',
  shareAndEarn: 'Share & Earn',
  forms: 'Forms',
  newTarget: 'New Target',
  newCard: 'New Card',
  newAddress: 'New Address',
  createAPIKey: 'Create API Key',
  twoFactorAuth: 'Two Factor Auth',
  createApp: 'Create App',
  createAccount: 'Create Account',
  documentation: 'Documentation',
  components: 'Components',
  resources: 'Resources',
  activity: 'Activity',
  customers: 'Customers',
  gettingStarted: 'Getting Started',
  customersListing: 'Customers Listing',
  customerDetails: 'Customers Details',
  calendarApp: 'Calendar',
  subscriptions: 'Campaigns',
  getStarted: 'Getting Started',
  campaignList: 'Campaign List',
  addCampaign: 'Add Campaign',
  viewCampaign: 'View Campaign',
  users: 'Users',
  withdrawal: 'Withdrawal',
  others: 'Others',
  deleted: 'deleted',
  pendingDelete: 'pending delete',
  balanceHistory: {
    actualBalanceChange: 'Balance Change',
    actualBalance: 'Balance After',
    availableBalanceChange: 'Available Balance Change',
    availableBalance: 'Available Balance After',
    invalidSearchDateMessage: 'Only allowed to search for {days} days.',
  },
  exportFile: 'Export File',
  importExcel: {
    importBalance: 'Import Balance',
    uploadFile: 'Upload file (.xlsx)',
    extensionError: 'The file must have an extension of .xlsx or .xls',
    maxFileSize: 'The file must be less than 5MB in size',
    balanceMaxFileAmountError: 'A certain currency has exceeded the amount',
    balanceFileFormatError: 'The file has the wrong format !',
    confirmImportFile: 'Are you sure want to upload the file ?',
    confirmUpdateSetting: 'Are you sure want to update the setting ?',
    actionSend: 'Yes',
    badRequest: 'There was an error uploading the file',
    importSuccess: 'File upload successfully!',
    balanceTitle: 'Import balance',
    balanceDetailTitle: 'Import balance detail',
    setting: 'Balance import file settings',
    totalRows: 'Total Rows',
    failedRows: 'Failed Rows',
    succeedRows: 'Succeed Rows',
    balance: {
      name: 'File name',
      status: 'Status',
      createdAt: 'Create date',
      updatedAt: 'Update date',
      PROCESSING: 'Processing',
      SUCCESS: 'Success',
      CANCELLED: 'Cancelled',
    },
    balanceSetting: {
      currency: 'Currency',
      maxFileAmount: 'Max file amount',
      maxLineAmount: 'Max line amount',
      remainAmount: 'Remain amount',
      isUnlimited: 'Unlimited',
      btnEdit: 'Edit',
    },
    balanceDetail: {
      id: 'ID',
      email: 'Email',
      currency: 'Currency',
      amount: 'Amount',
      status: 'Status',
      note: 'Note',
      PROCESSING: 'Processing',
      SUCCESS: 'Success',
      CANCELLED: 'Cancelled',
      ERROR: 'Error',
    },
    validations: {
      ID_IS_NUMBER: 'ID should be a number',
      ID_IS_NOT_EMPTY: 'ID should be not empty',
      INVALID_EMAIL_ADDRESS: 'Invalid email address',
      EMAIL_IS_NOT_EMPTY: 'Email should be not empty',
      CURRENCY_IS_NOT_EMPTY: 'Currency should be not empty',
      AMOUNT_FIXED_NUMBER_IS_NOT_ZERO: 'Amount should be not 0',
      AMOUNT_IS_DECIMAL_18:
        'Amount should be a decimal number (max 18 precision)',
    },
  },
  gridTrading: {
    gridType: 'Grid Type',
    tradingPair: 'Trading pair',
    status: 'Status',
    profitSharing: 'Profit Sharing',
    maxGrid: 'Max Grid',
    minGrid: 'Min Grid',
    thresholdHigherPrice: 'Threshold higher price',
    thresholdLowerPrice: 'Threshold lower price',
    adjustCoefficient: 'Adjust Coefficient',
    delete: 'Delete',
    edit: 'Edit',
    deleteSuccess: 'Delete trading pair successfully',
    deleteFail: 'Delete trading pair fail',
    titleEdit: 'Edit trading pair',
    titleAdd: 'Add trading pair',
    savePairSuccess: 'Save trading pair successfully',
    savePairFail: 'Save trading pair fail',
    action: 'Action',
    createTime: 'Create Time',
    pair: 'Pair',
    botId: 'Bot ID',
    email: 'Email',
    totalInvestment: 'Total Investment',
    rangePrice: 'Range Price',
    numberOfGrid: 'No. of Grid',
    detail: 'Detail',
    strategyStatus: {
      pending: 'Pending',
      running: 'Running',
      ending: 'Ending',
      end: 'End',
      error: 'Error',
    },
  },
  menu: {
    reasonManagement: 'Reason Management',
    spotGrid: 'Spot Grid',
    tradingPair: 'Trading Pair',
    app: 'App',
    settings: 'Exchange Setting',
    balanceMonitor: 'Balance monitor',
    thresholdSetting: 'Notification Threshold',
    settingsObm: 'OBM Setting',
    highAndLow: 'High & Low',
    leaderBoard: 'Leader Board',
    settingTransfer: 'Setting Transfer',
    history: 'History',
    settingTrading: 'Setting Trading',
    statistic: 'Statistic',
    suspension: 'Suspension',
    suspensionList: 'Suspension List',
    crawler: 'Statistic Crawler',
    winning: 'Winning Rate Analysis',
    unlimitedUser: 'Unlimited User',
    zeroFeeUser: 'Zero Fee User',
    blockUser: 'Block User',
    userTradingLimit: 'User Trading Limit',
    userBalance: 'User Balance',
    userManagement: 'User management',
    basicInfo: 'Basic Information',
    listAccountLv: 'List Account Level',
    reasonCategory: 'Reason Category List',
    reason: 'Reason List',
    needToApprove: {
      [KycType.PERSONAL]: 'Review Personal KYC',
      [KycType.ENTERPRISE]: 'Review Enterprise KYC',
    },
    marketingFunctions: 'Marketing Functions',
    userTag: 'User Tag',
    registrationChannel: 'Registration Channel',
    missingRewards: 'Missing Rewards',
    blacklistUser: 'Blacklist User',
    balanceAbnormalList: 'Balance Abnormal List',
    importExcel: 'Import Excel',
    importExcelSub: {
      importBalance: 'Import Balance',
      importBalanceSetting: 'Balance import file settings',
    },
    wallet: 'Wallet',
    walletSub: {
      withdrawalControl: {
        index: 'Withdrawal Control',
        userNotConfirmed: 'User Not Confirmed',
        userCanceled: 'User Canceled',
        approvalPending: 'Approval Pending',
        approvedTransactions: 'Approved Transactions',
        remittedTransactions: 'Remitted Transactions',
        rejectedTransactions: 'Rejected Transactions',
        transactionDetails: 'Transaction Detail',
        pendingApprovalDetail: 'Pending approval details',
        approvedApprovalDetail: 'Approved approval details',
        remittedApprovalDetail: 'Remitted approval details',
        rejectedApprovalDetail: 'Rejected approval details',
        transactionId: 'Transaction ID',
        withdrawalCurrency: 'Withdrawal Currency',
        amount: 'Amount',
        withdrawalAddress: 'Withdrawal Address',
        createdDate: 'Created Date',
        customerInformation: 'Customer Information',
        name: 'Name',
        country: 'Country',
        birthdate: 'Birthdate',
        tel: 'Tel',
        email: 'Email',
        remarks: 'Remarks',
        notGood: 'Not Good',
        good: 'Good',
        securityTest: 'User security tests',
        highlowWinrateDesc:
          'The user has played High-Low over {hl_limit_time} times and win rate over {hl_win_rate_percent}%',
        highlowProfitDesc:
          'The user has earned from High-Low over ${hl_profit}',
        dailyRatingDesc:
          'The user has made {daily_rating_order} orders in 1 day',
        minutelyRatingDesc:
          'The user has made {minutely_rating_order} orders in 1 minute',
        userBalanceDesc: 'The "{currency}" balance of this user is suspicious',
        manuallyUpdateMajorBalanceDesc:
          "The admin has added to this user's balance with a value of over ${manual_update_major_balance_amount} manually",
        dividendCodeDuplicatedDesc:
          'The user has used a span-once dividend code many times',
        approvalConfirmMessage:
          'Are you sure you want to approve this transaction?',
        rejectionConfirmMessage:
          'Are you sure you want to reject this transaction?',
        remissionConfirmMessage:
          'Are you sure you want to remit this transaction?',
        verifySuccess: 'Transaction successfully verified',
        remitSuccess: 'Transaction successfully remitted',
        approveFailed: 'Failed to approve transaction',
        remitFailed: 'Failed to remit transaction',
        rejectSuccess: 'Transaction successfully rejected',
        rejectFailed: 'Failed to reject transaction',
        approvedDate: 'Approved date',
        approvedBy: 'Approved by',
        sentDate: 'Sent date',
        sentBy: 'Sent by',
        rejectDate: 'Reject date',
        rejectBy: 'Reject by',
        log: 'Log',
        processSourceType: 'Process source type',
        processType: 'Process type',
        processTypeNote:
          '(This process type will submit to hot-wallet system, please make sure you want to do it)',
        transactionHash: 'Transaction hash',
        hotWalletProgress: 'Hot-Wallet progress',
        manualProgress: 'Manual progress',
        estimateTime: 'Estimate time',
        estimateWaitTime: 'About 30 minutes from submit time',
        hotWalletSubmit: 'Hot-Wallet submit',
        remitTransaction: 'Remitted Transaction',
        backToList: 'Back to list',
        confirmer1: 'Confirmer 1',
        confirmer2: 'Confirmer 2',
        adminInfo: 'Administrator Information',
      },
      history: {
        index: 'History',
        depositHistory: 'Deposit History',
        withdrawHistory: 'Withdraw History',
        convertSmallBalance: 'CASTLE Convert History',
        transferHistory: 'Transfer History',
        swapHistory: 'Convert History',
      },
      walletService: {
        index: 'Wallet Service',
        depositTransaction: 'Deposit Transaction',
        withdrawTransaction: 'Withdraw Transaction',
        motherWalletList: 'Mother Wallet List',
        userWalletList: 'User Wallet List',
        depositIncidentCollection: 'Deposit Incident Collection',
        motherWalletIncidentCollection: 'Mother Wallet Incident Collection',
      },
    },
    walletSetting: 'Wallet Setting',
    walletSettingSub: {
      depositSetting: 'Deposit Setting',
      autoWithdrawSetting: 'Auto Withdraw Setting',
      motherWalletSetting: 'Mother Wallet Setting',
      blacklistAddress: 'Blacklist Address',
      blacklistUser: 'Blacklist User',
      globalWithdrawal: 'Global Withdrawal',
      updateSettingSuccess: 'Setting updated successfully',
      updateSettingFailed: 'Failed to update setting',
      convertSmallBalance: 'CASTLE Convert Setting',
      swapSetting: 'Convert Setting',
    },
    tradingSetting: 'Trading Pair',
    categorySetting: 'Category',
    coinSetting: 'Currency',
    generalSetting: 'General',
    systemTargetSetting: 'System target',
    appVersion: 'App version',
    historySub: {
      login: 'Login Histories',
      userBalanceChange: 'History User Balance Change',
    },
    accountsAndPermissions: 'Accounts & Permissions',
    accounts: 'Accounts',
    roles: 'Roles',
    actionLog: 'Admin Action Log',
    auto_withdraw: 'Auto withdraw',
    auto_withdraw_groups: 'Groups',
    importListToBan: 'Import List To Ban',
    exchange: 'Exchange',
    openOrder: 'Open Order',
    orderHistory: 'Order History',
    tradeHistory: 'Trade History',
    systemPushNotificationSetting: 'System Push Notification Setting',
    groupNotification: 'General Notification',
    notification: 'Notification',
    notificationSetting: 'Notification Setting',
    marketMaker: 'Market Maker',
    generateData: 'Generate Data',
    marketMakerSettings: 'Settings',
    generateDataV2: 'Generate Data V2',
    marketMakerSystemTarget: 'System Target',
    marketMakerManagePair: 'Pair',
    currency: 'Currency',
    currencySetting: 'Setting currency',
    currencyDown: 'Down currency',
    registerNewCurrency: 'Register New Currency',
    registerNewEB20: 'Register New ERC20 & BEP20',
    importOrderbook: 'Import Orderbook',
    export: 'List File Export',
    multiLanguageSetting: 'Multi Language Setting',
    listTranslateSetting: 'List Translates',
    listLanguageSetting: 'List Languages',
    botUser: 'Bot User',
    botSetting: 'Bot Setting',
    commonOBM: 'common',
    globalSetting: 'Global Setting',
    globalWithdrawSetting: 'Withdraw Global Setting',
    globalDepositSetting: 'Deposit Global Setting',
    apiKeyManagement: 'Api Key Management',
    listApiKeyManagement: 'List Api Key Management',
    listFileExport: 'List File Export',
    dividend: {
      title: 'Dividends',
      listScreen: 'List',
      detailScreen: 'Detail',
      editScreen: 'Edit',
      codeListScreen: 'Code List',
      historyScreen: 'History',
      disableUserScreen: 'Disable Dividend User',
    },
    monitorObm: 'OBM Monitor',
    obmMonitorCounter: 'Counter Order',
    usdtFeeSetting: 'USDT Fee Setting',
    futures: {
      title: 'Futures',
      openOrder: 'Open Order',
      orderHistory: 'Order History',
      openPosition: 'Open Position',
    },
    futuresSetting: {
      title: 'Futures Setting',
      user: 'Futures VIP Users',
      setting: 'Futures Setting',
    },
    mt5: {
      mt5: 'MT5',
      payment: 'Payment',
      payout: 'Withdrawal',
      payin: 'Deposit',
    },
    trezorWallet: 'Trezor wallet collector',
  },
  walletGeneral: {
    fee: 'Fee',
    amount: 'Amount',
    address: 'Address',
    fromAddress: 'From Address',
    transactionHash: 'Transaction Hash',
    transactionId: 'Transaction ID',
    status: 'Status',
    selectStatus: 'Select Status',
    selectCoin: 'Select Coin',
    email: 'Email',
    coin: 'Coin',
    chainCode: 'Chain Code',
    balance: 'Balance',
    date: 'Date',
    createdDate: 'Created Date',
    cancelDate: 'Cancel Date',
    approvedDate: 'Approved Date',
    executionDate: 'Execution Date',
    from: 'From',
    to: 'To',
    fromBalance: 'From Balance',
    toBalance: 'To Balance',
    userId: 'User Id',
    collectionThreshold: 'Collection Threshold',
    collection: 'Collection',
    autoCollectionEnable: 'Auto Collection Enable',
    depositConfirmation: 'Deposit Confirmation',
    userMaxAmount: 'User Wallet Auto Collection Threshold',
    depositEnable: 'Deposit Enable',
    withdrawEnable: 'Withdraw Enable',
    maximumAutoWithdrawThreshold: 'Maximum Auto Withdraw Threshold',
    autoWithdrawEnable: 'Auto Withdraw Enable',
    numberWithdrawTransactionLimitByDay:
      'Number Withdraw Transaction Limit By Day',
    withdrawAmountLimitByDay: 'Withdraw Amount Limit By Day',
    withdrawConfirmation: 'Withdraw Confirmation',
    motherWalletAddress: 'Mother Wallet Address',
    motherWalletAlertThreshold: 'Mother Wallet Alert Threshold',
    motherWalletAutoCollectionThreshold:
      'Mother Wallet Auto Collection Threshold',
    motherWalletMaintainBalance: 'Mother Wallet Maintain Balance',
    source: 'Source',
    note: 'Note',
    reason: 'Reason',
    areYouSureToDelete: 'Are you sure to delete?',
    areYouSureToUpdate: 'Are you sure to update?',
    areYouSureToAdd: 'Are you sure to add?',
    areYouSureToCollection: 'Are you sure you want to collection?',
    thereIsNoData: 'There is no data',
    thisFieldIsRequired: 'This field is required',
    addressIsRequired: 'Address is required',
    chainCodeIsRequired: 'Chain code is required',
    emailIsInvalid: 'Email is invalid',
    emailIsRequired: 'Email is required',
    export: 'Export',
    exportFailed: 'Failed to export!',
    exportSucceed: 'Exported file was downloading!',
    addDeposit: 'Add deposit',
    addDepositManual: 'Add deposit manual',
    confirmAddDeposit: 'Are you sure to add deposit?',
    retry: 'Retry',
    failedRetryDeposit: 'Failed to retry deposit transaction',
    succeedRetryDeposit: 'Succeed, deposit transaction was retrying!',
    failedRetryWithdraw: 'Failed to retry withdraw transaction',
    succeedRetryWithdraw: 'Succeed, withdraw transaction was retrying!',
    retryWithdraw: 'Withdraw retry',
    withdrawId: 'Withdraw ID',
    feeLimit: 'Fee limit',
    gasLimit: 'Gas limit',
    failedCreateDeposit: 'Failed to create deposit transaction',
    succeedCreateDeposit: 'Succeed, deposit transaction was processing!',
    succeedCreateManualDeposit: 'Succeed, deposit transaction was created!',
    stop: 'Stop',
    forceStopTitle: 'Force stop',
    confirmStopWithdraw:
      'This action will stop all next process of this withdraw transaction, are you sure to continue?',
    succeedStopWithdraw: 'Succeed! Transaction was handling to stop',
    failedStopWithdraw: 'Failed to stop transaction',
    detail: 'Detail',
    transactionDetail: 'Transaction detail',
    transactionQueueStatus: {
      [TRANSACTION_QUEUE_STATUS.PROCESSING]: 'Processing',
      [TRANSACTION_QUEUE_STATUS.DONE]: 'Completed',
    },
    retriedAt: 'Action by {admin}',
    systemLog: 'System log',
    retryStatusHistory: 'Before status → After status',
    errorLoadTransaction: 'Failed to load transaction detail, try again!',
    overwriteAction: 'Overwrite action',
    overwriteBy: 'Overwrite by',
    overwriteAt: 'Overwrite at',
    overwriteLog: 'Overwrite system log',
    failedExportTooFar: 'Failed to export period large than {month} months',
    exportProcessing: 'Export file is processing',
    processSourceType: 'Process Source Type',
    autoWithdrawFail: 'Auto Withdraw Fail',
    manualWithdraw: 'Manual withdraw',
    autoWithdraw: 'Auto withdraw',
    withdrawalApprover: 'Withdrawal Approver',
    fileName: 'File Name',
    download: 'Download',
    downloadFileFailed: 'Download file failed',
    downloadFileSuccess: 'Download file success',
    time: 'Time',
    processType: 'Process type',
    domain: 'Domain',
    result: 'Result',
    description: 'Description',
    withdrawalEnable: 'Withdrawal Enable',
    minimumWithdrawal: 'Minimum Withdrawal',
    maximumWithdrawal: 'Maximum Withdrawal',
    maximumResetTime: 'Maximum Reset Time',
    maximumResetTimeDay: 'Maximum Reset Time (days)',
    feeType: 'Fee Type',
    feeAmount: 'Fee Amount',
    castleFeeSetting: 'Castle Fee Setting',
    feeCastle: 'Castle Fee',
    feeMode: 'Fee Mode',
    decimalOfFee: 'Decimal Of Fee',
    feeUsd: 'USDT Fee (Coin)',
    feeUsdCastle: 'USDT Fee (Castle)',
    network: 'Network',
    on: 'On',
    off: 'Off',
    confirmation: 'Confirmation',
    withdrawalThreshold: 'Auto withdrawal threshold',
    minimumWithdrawalMax:
      'The minimum withdrawal must be less than auto withdrawal threshold',
    minimumWithdrawalMaxLimit:
      'The maximum withdrawal must be greater than or equal minimum withdrawal',
    validateMin: 'This field must be greater than or equal {min}.',
    usdtFeeSetting: 'USDT Fee Setting',
    appliedUsdt: 'Applied Usdt',
    appliedGlobalSetting: 'Applied Global Setting',
    apply: 'Apply',
    applyUsdtFeeWarningText:
      'Apply for all selected, applied and also force change fee mode from COIN/USDT to GLOBAL USDT',
    minimumUsdtFeeValue: 'USDT fee must greater equal than 0',
    price: 'Price',
    userInWalletBlackListUser: 'User in wallet blacklist user',
    beforeValue: 'Before',
    afterValue: 'After',
    usdtValueByCoin: 'USDT Value (Coin)',
    usdtValueByCastle: 'USDT Value (Castle)',
    yes: 'Yes',
    no: 'No',
    applied: 'Applied',
    selectedItems: 'Selected: {number} Items',
    hdPath: 'HD Path',
    collect: 'Collect',
    collectSelectedWallet: 'Collect {number} selected',
    collectTrezorTitle: 'Collect {token} from trezor',
    unavailableReceiverAddress: "Receiver address of {chain} wasn't set.",
    estimateFee: 'Estimated fee',
    receiverAddress: 'Receiver address',
    failedCollectTrezor: 'Failed to collect with trezor wallet',
    succeedCollectTrezor: 'Collected with trezor wallet',
    invalidSymbol: "Symbol wasn't found.",
    TRANSACTION_HASH_IS_EXISTS: 'Transaction hash is exists',
    XRP_MUST_HAVE_TAG: 'XRP must have tag',
    CREATE_TRANSACTION_UNSUCCESSFULLY: 'Create transaction unsuccessfully',
    DEPOSIT_ADDRESS_NOT_EXISTS: 'Deposit address not exists',
    USER_NOT_FOUND: 'User not found',
  },
  userInformationDetail: 'User Information Detail',
  userInformationVerification: 'User Information Verification',
  identificationVerificationDocument: 'Identification verification document',
  edit: 'Edit',
  delete: 'Delete',
  create: 'Create',
  suspend: 'Suspend',
  user: {
    notHaveEmail: "User hasn't registered email yet",
    notRegisteredInformation:
      "User {email} hasn't registered the information yet",
  },
  email: 'Email',
  changeEmail: 'Change Email',
  identificationDocument: 'Identification Document',
  idNumber: 'ID Number',
  unknown: 'Unknown',
  customerInformation: 'Customer Information',
  currentAddress: 'Current Address',
  registeredAddress: 'Registered Address',
  nationality: 'Nationality',
  firstName: 'First name',
  givenName: 'Given name',
  lastName: 'Last name',
  surname: 'Surname',
  birthdate: 'Birthdate',
  gender: 'Gender',
  building: 'Building',
  room: 'Room',
  address: 'Address',
  city: 'City',
  state: 'State',
  region: 'Region',
  zipCode: 'ZipCode',
  country: 'Country',
  phoneNumber: 'Phone Number',
  googleAuthenticator: 'Google Authenticator',
  status: 'Status',
  reset: 'Reset',
  update: 'Update',
  remarks: 'Remarks',
  genderValue: {
    [Gender.MALE]: 'Male',
    [Gender.FEMALE]: 'Female',
    [Gender.OTHER]: 'Other',
  },
  rejectionReasons: 'Rejection Reasons',
  submit: 'Submit',
  cancel: 'Cancel',
  chooseCase: 'Choose Case',
  caseSelected: 'Case Selected',
  compare: 'Compare',
  documentType: 'Document type',
  userBlacklistHistoryTypeValue: {
    [UserBlacklistHistoryType.BAN]: 'Ban',
    [UserBlacklistHistoryType.UNBAN]: 'Unban',
  },
  kycDocumentTypeValue: {
    [KycIdDocumentType.PASSPORT]: 'Passport',
    [KycIdDocumentType.ID_CARD]: 'ID Card',
    [KycIdDocumentType.DRIVING_LICENCE]: "Driver's License",
    [KycIdDocumentType.OTHERS]: 'Others',
    [KycIdDocumentType.RESIDENCE_CARD]: 'Residence Card',
    [KycIdDocumentType.NUMBER_CARD]: 'My Number Card',
  },
  kycDocumentMetadataValue: {
    [KycIdDocumentMetadata.ID_CARD_FRONT]: 'ID Card (Front)',
    [KycIdDocumentMetadata.ID_CARD_BACK]: 'ID Card (Back)',
    [KycIdDocumentMetadata.PASSPORT]: 'Passport',
    [KycIdDocumentMetadata.SELFIE]: 'Selfie',
    [KycIdDocumentMetadata.FACE_RECOGNITION]: 'Face Recognition',
    [KycIdDocumentMetadata.CERTIFICATE_BUSINESS]:
      'Certificate Business Registration',
    [KycIdDocumentMetadata.MEMORANDUM_ARTICLES]: 'Memorandum',
    [KycIdDocumentMetadata.OFFICIAL_COMPANY_REPORT]: 'Official Company',
    [KycIdDocumentMetadata.LETTER_AUTHORIZATION]: 'A letter of Authorization',
    [KycIdDocumentMetadata.SUPPLEMENTARY_INFORMATION]:
      'Supplementary Information',
    [KycIdDocumentMetadata.DRIVING_LICENCE_FRONT]: "Driver's License (Front)",
    [KycIdDocumentMetadata.DRIVING_LICENCE_BACK]: "Driver's License (Back)",
    [KycIdDocumentMetadata.RESIDENCE_CARD_FRONT]: 'Resident Card (Front)',
    [KycIdDocumentMetadata.RESIDENCE_CARD_BACK]: 'Resident Card (Back)',
    [KycIdDocumentMetadata.NUMBER_CARD_FRONT]: 'My Number Card (Front)',
    [KycIdDocumentMetadata.NUMBER_CARD_BACK]: 'My Number Card (Back)',
  },
  documentID: 'Document ID',
  checklist: 'Checklist',
  reviewOcr: {
    compareName: 'Does the name on the photo and the name entered match?',
    compareBirthday:
      'Does the birth date on the photo and the date of birth entered match?',
    compareDocumentType:
      'Is the selected document type and the submitted document type the consistent?',
    compareLivenessSelfie:
      'Does the face on the liveness photo or the selfie match the face on the document?',
  },
  yes: 'Yes',
  no: 'No',
  accept: 'Accept',
  approve: 'Approve',
  reject: 'Reject',
  pending: 'Pending',
  rejected: 'Rejected',
  accepted: 'Accepted',
  verify: 'Verify',
  ocrStatus: {
    [OcrStatus.MATCHED]: 'MATCHED',
    [OcrStatus.NOT_MATCHED]: 'NOT MATCHED',
    [OcrStatus.UNCERTAIN]: 'UNCERTAIN',
    [OcrStatus.ERROR]: 'ERROR',
    [OcrStatus.NOT_RUNNING_YET]: 'PROCESSING',
  },
  duplicateStatus: {
    [DuplicateFaceStatus.HAVE_DUPLICATE]: 'YES',
    [DuplicateFaceStatus.NOT_DUPLICATE]: 'NO',
    [DuplicateFaceStatus.WARNING]: 'WARNING',
    [DuplicateFaceStatus.UNKNOWN]: 'UNKNOWN',
  },
  livenessStatus: {
    [LivenessStatus.PASS]: 'PASS',
    [LivenessStatus.FAIL]: 'FAIL',
    [LivenessStatus.UNKNOWN]: 'UNKNOWN',
  },
  identityDocumentVerificationStatus: {
    [IdentityDocumentVerificationStatus.PASS]: 'PASS',
    [IdentityDocumentVerificationStatus.FAIL]: 'FAIL',
    [IdentityDocumentVerificationStatus.UNKNOWN]: 'UNKNOWN',
  },
  name: 'Name',
  requiredFieldNote: '* Indicates required fields',
  requiredFieldForAccepKycNote: '* Indicates required fields for "Accept".',
  autoKycProcessing: 'Auto KYC is processing. Please comeback later!',
  sourcesOfFunding: 'Sources of Funding',
  information: 'Information',
  screening: 'Screening',
  riskReport: 'Risk Report',
  basicInformation: 'Basic Information',
  registrationUserInformation: 'Registration User Information',
  enterpriseInformation: 'Enterprise Information',
  relatedParties: 'Related Parties',
  websiteUrl: 'Website URL',
  applicantName: "Applicant's name",
  loginEmail: 'Login Email',
  applicantJobTitle: "Applicant's Job Title",
  reasonToApply: 'Reason to Apply',
  companyName: 'Company Name',
  companyLocation: 'Company Location',
  companyRegisteredCountry: 'Company Registered Country',
  contactNumber: 'Contact Number',
  entityType: 'Entity Type',
  registeredDate: 'Registered Date',
  ownershipStructureLayer: 'Ownership Structure Layer',
  incorporationNumber: 'Incorporation Number',
  downloadFile: 'Download File',
  downloadCSV: 'CSV Download',
  fileNotFound: 'File Not Found',
  role: 'Roles(s)',
  holdRole: 'Hold 1 role | Hold {count} roles',
  accountLevel: 'Account Level',
  levelStatus: 'Level Status',
  level: 'Level',
  levelStatusValue: {
    1: 'Just Registered',
    2: 'Email Verified',
    3: {
      1: 'Waiting For Auto KYC',
      2: 'Waiting For Admin KYC',
      3: 'Admin Rejected',
    },
    4: 'Admin Accepted',
  },
  loading: 'Loading',
  noData: 'No Data',
  userName: 'User Name',
  referralEmail: 'Referral Email',
  bannedStatus: 'Banned Status',
  registeredInformation: 'Registered Information',
  registeredChannel: 'Registered Channel',
  add: 'Add',
  search: 'Search',
  download: 'Download',
  riskRating: 'Risk Rating',
  riskRatingValue: {
    [RiskRating.FAIL_INFO]: 'FAIL INFO',
    [RiskRating.LOW]: 'LOW',
    [RiskRating.MEDIUM]: 'MEDIUM',
    [RiskRating.HIGH]: 'HIGH',
    [RiskRating.SCREENING]: 'SCREENING',
    [RiskRating.UNKNOWN]: 'UNKNOWN',
    HIGH: 'HIGH',
    LOW: 'LOW',
    MEDIUM: 'MEDIUM',
    UNKNOWN: 'UNKNOWN',
  },
  lastLogin: 'Last Login',
  set2FA: 'Set 2FA',
  socialLink: 'Social Link',
  authenticatorVerifyStatusValue: {
    [UserAuthenticatorVerifyStatus.UNVERIFIED]: 'Disable',
    [UserAuthenticatorVerifyStatus.VERIFIED]: 'Enable',
  },
  userInfoStatusValue: {
    [UserInfoStatus.NOT_UPDATED]: 'Not yet',
    [UserInfoStatus.UPDATED]: 'Already',
  },
  socialLinkValue: {
    1: 'Already',
    0: 'Not yet',
  },
  detail: 'Detail',
  all: 'All',
  keyword: 'Keyword',
  tableDisplayResult: 'Display {start} to {end} of {total}',
  rescreenThisProfile: 'Re-screen this profile',
  dowJonesFeed: 'Dow Jones Feed',
  internetSearch: 'Internet Search',
  artemiscan: 'Artemiscan',
  versions: 'Versions',
  dateDetail: 'Date Detail',
  category: 'Category',
  addSearchConditions: 'Add Search Conditions',
  linkDetail: 'Link Detail',
  mostRelevantName: 'Most Relevant Name',
  sentimentScore: 'Sentiment Score',
  additionalInformation: 'Additional Information',
  list: 'List',
  alias: 'Alias',
  artemiscanKey: {
    GRT: 'GRT',
    SDNName: 'Sdnname',
    SDNType: 'Sdntype',
    callSign: 'Callsign',
    concatAl: 'Concatal',
    DOB: 'Dob',
    entNum: 'Entnum',
    formattedName: 'Formattedname',
    gender: 'Gender',
    nationality: 'Nationality',
    on_SDN: 'On_sdn',
    program: 'Program',
    recordType: 'Recordtype',
    remarks: 'Remarks',
    title: 'Title',
    tonnage: 'Tonnage',
    vessFlag: 'Vessflag',
    vessOwner: 'Vessowner',
    vessType: 'Vesstype',
  },
  needToApproveTabs: {
    reviewOcr: 'Need to Approve',
    reviewOcrPending: 'User information verification (Pending)',
    reviewRisk: 'Waiting Screening',
    reviewRiskPending: 'Waiting Screening (Pending)',
  },
  success: 'Success',
  VALIDATION: {
    FAIL: 'Validation Fail',
    field: 'This field is not valid',
    notLessThanZero: 'This field cannot be less than 0',
    isInteger: 'This field must be an integer',
    EXISTED_IN_SYSTEM: 'Existed in system',
    PASSWORD_NOT_MATCH: 'Password is not match',
    SAME_AS_OLD_PASSWORD: 'Same as current password',
    REQUIRED: 'This field is required.',
    EMAIL: 'Need to be an email.',
    DIGITS: '{name} is {length} digits.',
    ID_DOCUMENT_UNIQUE: 'The id number has already been taken.',
    INTEGER: 'This field must be integer',
    CONFIRM: 'Confirmation is not match',
    FIELD_NUMBER:
      'This field {field} must be greater than {min} and less than {max}',
    amountLimitByDay:
      'This Withdraw Amount Limit must be less than Withdraw Amount Limit By Day',
    amountLimit:
      'This Min Withdraw Amount Limit must be less than Max Withdraw Amount Limit',
    mother:
      'This Mother Wallet Alert Threshold must be less than Mother Wallet Auto Collection Threshold',
    IS_NUMBER: 'This field must be a number.',
    NOT_CONTAINS_IN_LIST: 'Not contains in list',
    AFTER_OR_EQUAL_NOW: 'Must be after or equal current time',
    MAX_LENGTH: 'This field can not be longer than {length} characters',
  },
  criteriaName: 'Criteria Name',
  criteriaPercent: 'Criteria (%)',
  score: 'Score',
  riskReportValue: {
    category: {
      countryRisk: 'Country Risk',
      taxRisk: 'Tax Risk',
      screeningRisk: 'Screening Risk',
      operationalRisk: 'OperationalRisk',
    },
    criteria: {
      CPI: 'CPI - Corruption Perception Index',
      FATF: 'FATF - Financial Action Task Force',
      OECD: 'OECD - Organisation for Economic Co-operation and Development',
      FSI: 'FSI - Financial Secrecy Index',
      FATCA: 'FATCA - Foreign Account Tax Compliance Act',
      PEP: 'PEP / Sanctions / Adverse News',
      onboardingMode: 'Onboarding Mode',
      paymentModes: 'Payment Modes',
      complexityOfProductsAndServices: 'Complexity of Products and Services',
    },
  },
  computedRiskRating: 'Computed Risk Rating',
  total: 'Total',
  concludeAndSubmitApprovalStatus: 'Conclude And Submit Approval Status',
  overrideRiskRating: 'Override Risk Rating',
  approvalStatus: 'Approval Status',
  confirm: 'Confirm',
  suffix: 'Suffix',
  alsoKnownAs: 'Also Known As',
  lowQualityAka: 'Low Quality Aka',
  primaryName: 'Primary Name',
  spellingVariation: 'Spelling Variation',
  sanction: 'Sanction',
  since: 'Since',
  to: 'To',
  additionalDetail: 'Additional Detail',
  sourceDetail: 'Source Detail',
  profileNote: 'Profile Note',
  lastReviewDate: 'Last Review Date',
  description: 'Description',
  summary: 'Summary',
  top3NamesHit: 'Top 3 Names Hit',
  namehit: 'Name Hit',
  confidence: 'Confidence',
  sentimentClass: 'Sentiment Class',
  sentimentHitSnapshot: 'Sentiment Hit Snapshot',
  versionHistory: 'Version History',
  createdBy: 'Created by',
  updatedBy: 'Updated by',
  latest: 'Latest',
  birthday: 'Birthdate',
  buildingRoom: 'Building/Room',
  countryId: 'Country',
  nationalityId: 'Nationality',
  furigana: 'Furigana',
  files: 'Identification Document',
  idDocumentNo: 'ID number',
  remark: 'Remarks',
  stateRegion: 'State/Region',
  updatedByAt: 'Updated by {name} at {time}',
  haveKycData: 'Have KYC Data',
  exportByFilter: 'Export filtered',
  exportAll: 'Export all',
  exportSucceedMessage: 'Exported at {datetime}, ',
  exportFailedMessage: 'Failed to export at {datetime}.',
  exportProcessingMessage: 'Processing export',
  expiredExportFile: 'Exported file was expired.',
  googleAuthenticatorStatus: 'Google Authenticator Status',
  kycStatusValue: {
    [KycStatus.ACCEPT]: 'Accepted',
    [KycStatus.APPROVED_PAPER]: 'Document Approved',
    [KycStatus.AUTO_KYC_PROCESSED]: 'Auto KYC Processed',
    [KycStatus.NEW]: 'Just Submited',
    [KycStatus.PENDING]: 'Pending',
    [KycStatus.PENDING_PAPER]: 'Pending',
    [KycStatus.REJECT]: 'Rejected',
  },
  matchInfo: 'Match Info',
  adminDecisions: 'Admin Decisions',
  updatedAt: 'Updated At',
  newMission: 'New Mission',
  startDate: 'Start date',
  endDate: 'End date',
  missionBasicInfo: 'Mission basic info',
  missionName: 'Mission name',
  shortDescription: 'Short description',
  priorityOrder: 'Priority (display order)',
  eventCondition: 'Event conditions',
  event: 'Event',
  service: 'Service',
  selectEvent: 'Select event',
  property: 'Property',
  operator: 'Operator',
  value: 'Value',
  item: 'Item',
  action: 'Action',
  userCondition: 'User conditions',
  eventName: 'Event name',
  rewardRecipient: 'Reward recipients',
  userLabel: 'User',
  grantMethod: 'Grant Method',
  propertyToCalculateAmount: 'Property To Calculate Amount',
  percent: 'Percent',
  refererUserLabel: 'Referer user',
  amount: 'Amount',
  currency: 'Currency',
  wallet: 'Wallet',
  saveMission: 'Save mission',
  deleteMission: 'Delete mission',
  deactivateMission: 'Deactivate mission',
  activateMission: 'Activate mission',
  guideLink: 'Guide link',
  limitReceivedReward: 'Limit received reward (max 999999)',
  budgetLimit: 'Budget Limit',
  statsReleasedMoney: 'Statistic released money',
  channelList: 'Channel list',
  id: 'ID',
  channelName: 'Channel name',
  channelLink: 'Channel link',
  channelDynamicLink: 'Dynamic link',
  channelDynamicLinkPlaceHolder:
    'Dynamic link will be auto generated after save',
  tag: 'Tag',
  createDate: 'Create Date',
  addChannel: 'Add Channel',
  editChannel: 'Edit Channel',
  deleteChannel: 'Delete Channel',
  saveChannel: 'Save Channel',
  searchTags: 'Type something to search tags',
  addChannelSuccess: 'New channel was added',
  addChannelFailed: 'Failed to add channel',
  updateChannelSuccess: 'Channel was updated',
  updateChannelFailed: 'Failed to update channel',
  serverError: 'Server error',
  deleteChannelConfirm: 'Are you sure you want to delete?',
  rootLink: 'Root link',
  errorValidateChannelName:
    'Channel name only allows the following characters: A-Z, a-z, 0-9, _',
  untitled: 'Untitled',
  enterNewTag: 'Enter new tag',
  succeedAddedTagMsg: 'Tag added, ready to use!',
  failedAddedTagMsg: 'An error when add tag, please try again',
  campaignStatus: {
    [CampaignStatus.RUNNING]: 'Running',
    [CampaignStatus.OUT_OF_BUDGET]: 'Out of budget',
    [CampaignStatus.ENDED]: 'Ended',
    [CampaignStatus.COMING_SOON]: 'Coming soon',
    [CampaignStatus.INACTIVE]: 'Deactivated by Admin',
  },
  missionStatus: {
    [MissionStatus.RUNNING]: 'Running',
    [MissionStatus.OUT_OF_BUDGET]: 'Out of budget',
    [MissionStatus.ENDED]: 'Ended',
    [MissionStatus.COMING_SOON]: 'Coming soon',
  },
  campaignName: 'Campaign name',
  imageLink: 'Image link',
  notificationLink: 'Notification link',
  saveAllMissions: 'Save all missions',
  save: 'Save',
  confirmSaveMessage: 'Do you want to save the changes?',
  confirmDeleteMessage: 'Do you want to delete this limit?',
  confirmDeleteUserMessage: 'Do you want to delete {name}?',
  userId: 'User ID',
  password: 'Password',
  twoStepVerification: 'Two-step Verification',
  login: 'LOGIN',
  english: 'English',
  japan: 'Japan',
  authenticateFailed: 'Invalid login information.',
  loginConfirmTitle: 'Input email verification code',
  loginConfirmAnnotation:
    'Please check the email you received and enter the email verification code listed in the body of the message.',
  emailVerifyCode: 'Email verification Code',
  AUTHENTICATOR: {
    WRONG_AUTHENTICATOR_OTP: 'Two-step verification code is invalid.',
  },
  TOKEN: {
    INVALID: 'The verification code is invalid.',
  },
  KYC: {
    INVALID_STATUS:
      'Can not update. This account is already updated by another admin.',
    DUPLICATE_ID_DOCUMENT_NO: 'Duplicate ID document existed',
  },
  CAMPAIGN: {
    UPDATE: {
      INVALID_TYPE: 'Invalid type, active campaign in daily type was existed',
      INVALID_TIME: 'Invalid campaign time',
    },
  },
  MISSION: {
    INVALID_TIME: 'Invalid mission time',
    DUPLICATE_PRIORITY:
      'The priority value has already been used. Please confirm again.',
  },
  GLOBAL_NOTIFICATION: {
    CAN_NOT_CHANGE_AFTER_PUBLISHED: 'Can not update some info after published',
  },
  unsafeToLeave: "Changed isn't saved, are you sure to leave?",
  logout: 'Logout',
  failedCreateExistedTag: 'Failed to create, tag was existed!',
  error: 'Error',
  selected: 'Selected',
  addTags: 'Add Tags',
  searchReasonCategory: 'Filter by Reason Category',
  addReasonCategory: 'Add Reason Category',
  editReason: 'Edit Reason',
  editReasonCategory: 'Edit Reason Category',
  editReasonSuccess: 'Edit reason successfully',
  editReasonFail: 'Edit reason failed',
  addReasonSuccess: 'Add reason successfully',
  addReasonFail: 'Add reason failed',
  deleteReasonSuccess: 'Delete reason successfully',
  deleteReasonFail: 'Delete reason failed',
  editReasonCategorySuccess: 'Edit category successfully',
  editReasonCategoryFail: 'Edit category failed',
  addReasonCategorySuccess: 'Add category successfully',
  addReasonCategoryFail: 'Add category failed',
  deleteReasonCategorySuccess: 'Delete category successfully',
  deleteReasonCategoryFail: 'Delete category failed',
  addReason: 'Add Reason',
  saveReason: 'Save Reason',
  reasonCategory: 'Reason Category',
  reason: 'Reason',
  reasonName: 'Reason Name',
  reasonCategoryName: 'Category Name',
  reasonCategoryType: 'Category Type',
  saveReasonCategory: 'Save Reason Category',
  reasonCategoryTypes: {
    [ReasonCategoryTypeEnum.KYC_PERSONAL]: 'KYC PERSONAL',
    [ReasonCategoryTypeEnum.KYC_ENTERPRISE]: 'KYC ENTERPRISE',
    [ReasonCategoryTypeEnum.BAN_USER]: 'BANNED USER',
  },
  deleteTags: 'Delete Tags',
  addTagsForUser: 'Add a Tags For User',
  currentUserTags: 'Current user tags',
  currentUserTagEmpty: 'Current tag is empty',
  createNewTag: 'Create a new tag',
  autoTagging: 'Auto tagging',
  inputTags: 'Input tag what you want to add to all selected user(s)',
  releasedCashback: 'Released Cashback',
  releasedRealBalance: 'Released Real Balance',
  releasedRealReward: 'Released Real Reward',
  admin: 'Admin',
  priority: 'Priority',
  createdAt: 'Created at',
  endpoint: 'Endpoint',
  method: 'Method',
  request: 'Request',
  response: 'Response',
  statusCode: 'Status Code',
  timeProcessed: 'Time Proccess',
  active: 'Active',
  hiddenFromUser: 'Hide from users?',
  saveCampaign: 'Save Campaign',
  pleaseWait: 'Please wait...',
  searchCampaigns: 'Search Campaigns',
  deleteSelected: 'Delete Selected',
  searchExistingTag: 'Search existing tags',
  campaignDetail: 'Campaign Detail',
  createCampaign: 'Add a Campaign',
  displayCondition: 'Display conditions',
  language: 'Language',
  missingRewards: 'Missing Rewards',
  markAsResolved: 'Mark as resolved',
  retry: 'Retry',
  retrying: 'Retrying',
  confirmResolveReward: 'Are you sure to resolve this reward transaction?',
  confirmRetryReward: 'Are you sure to retry adding reward?',
  resolveRewardSuccess: 'Succeed to resolve reward transaction',
  resolveRewardFail: 'Failed to resolved reward transaction',
  retryRewardSuccess:
    'Succeed to retry to grant reward, refresh page in few second.',
  retryRewardFail: 'Failed to retry to grant reward, try again.',
  referenceId: 'Reference ID',
  campaignId: 'Campaign ID',
  missionId: 'Mission ID',
  currrentUserTags: 'Current user tags',
  depositSetting: 'Deposit Setting',
  autoWithdrawSetting: 'Auto Withdraw Setting',
  motherWalletSetting: 'Mother Wallet Setting',
  blacklist: 'Blacklist',
  tableDeposit: {
    coin: 'Coin',
    autoCollectionEnable: 'Auto Collection Enable',
    collectionThreshold: 'Collection Threshold',
    depositConfirmation: 'Deposit Confirmation',
  },
  coin: 'Coin',
  pair: 'Pair',
  setting: {
    spotGrid: {
      page: 'Spot Grid Trading',
      gridPage: 'Grids',
    },
    edit: 'Edit',
    bigCategoryNotExist: 'Big category is not exist',
    key: 'Key language',
    precisionBlock: 'DECIMAL PLACE OF PRICE ON ORDER BOOK',
    save: 'Save',
    clear: 'Clear',
    setting: 'Setting',
    registerTradingPair: 'REGISTER TRADING PAIR',
    tradingAddTitle: 'Add trading pair',
    tradingEditTitle: 'Edit trading pair',
    precisions: 'Precisions',
    defaultPrecision: 'Default precision',
    activeOBM: 'Active OBM',
    status: 'Status',
    minimumAmount: 'Minimum amount',
    minimumTotal: 'Minimum total',
    sellFee: 'Sell fee',
    buyFee: 'Buy fee',
    number: 'number',
    enableWarningThreshold: 'Enable warning threshold',
    warningUnderThreshold: 'Warning under threshold',
    warningTopThreshold: 'Warning top threshold',
    enableDangerThreshold: 'Enable danger threshold',
    dangerUnderThreshold: 'Danger under threshold',
    dangerTopThreshold: 'Danger top threshold',
    safeThreshold: 'Safe threshold',
    selectDecimal: 'select decimal',
    decimalPlaceOfAmount: 'Decimal place of amount',
    selectPrecision: 'Select precision',
    decimalPlaceOfPrice: 'Decimal place of price',
    marketPrice: 'Initial price',
    chooseInitTime: 'Please choose init time',
    initTime: 'Initial time',
    tradingPair: 'Trading pair',
    sellFeeType: 'Sell fee type',
    sellFeeCurrency: 'Sell fee currency',
    buyFeeType: 'Buy fee type',
    buyFeeCurrency: 'Buy fee currency',
    tradingFee: 'Trading fee',
    nDay: 'N day',
    nDayTotalLimit: 'N day total limit',
    nDayAmountLimit: 'N day amount limit',
    tradingLimit: 'Trading limit',
    selectDefaultPrecision: 'Select default precision',
    addPrecision: 'Add precision',
    obmStatus: 'OBM status',
    precision: 'Precision',
    pairStatus: 'Pair status',
    pair: 'Pair',
    pairInfo: 'Pair information',
    saveTrading: 'Save trading',
    invalidForm: 'Invalid form. Please check again',
    informDecimalAmount:
      'Decimal of amount must be is 1, when decimal of price greater than or equal 10',
    savePairError: 'Save pair trading error!',
    savePairSuccess: 'Save pair trading success!',
    addBigCategory: 'Add big category',
    category: 'Category',
    no: 'No',
    type: 'Type',
    addSmallCategory: 'Add small category',
    smallCategoryAddTitle: 'Add small category',
    smallCategoryEditTitle: 'Edit small category',
    bigCategory: 'Big category',
    saveCategory: 'Save category',
    name: 'Name',
    bigCategoryAddTitle: 'Add big category',
    bigCategoryEditTitle: 'Edit big category',
    saveLanguage: 'Save language error!',
    maxStatus: 'Only 3 categories are able to enable.',
    minStatus: 'At least 1 category is enabled.',
    saveCategoryError: 'Save category error!',
    saveCategorySuccess: 'Save category success!',
    noBigCategory: 'No category for add small category!',
    deleteCategoryError: 'Delete category error!',
    deleteCategorySuccess: 'Delete category success!',
    address: 'Site address',
    network: 'Network',
    coinActive: 'Active',
    coinName: 'Name',
    registerNewERC: 'Register new ERC20',
    registerNewCoin: 'Register new Coin',
    txidTransactionFormat: 'Txid transaction format',
    decimal: 'Decimals',
    icon: 'Icon',
    coin: 'Coin',
    contractAddress: 'Contract address',
    coinInfo: 'CURRENCY INFORMATION',
    active: 'Active',
    saveCoin: 'Save coin',
    transaction_tx_path: 'Transaction path',
    transaction_explorer: 'Transaction explorer',
    confirm: 'Confirmation',
    environment: 'ENV',
    symbol: 'Symbol',
    networks: 'Networks',
    coinEditTitle: 'Edit currency',
    coinAddTitle: 'Add currency',
    addressNetwork: 'Contract address',
    registerNewErc20: 'Register new ERC20',
    saveNetwork: 'Save network',
    scanError: 'The contract address is invalid.',
    success: 'Save setting success!',
    error: 'Save setting error!',
    forceUpdate: 'Force update',
    changeLog: 'Change log',
    releaseDate: 'Release date',
    version: 'Version',
    platform: 'Platform',
    appVersionEditTitle: 'Edit app version',
    appVersionAddTitle: 'Add app version',
    registerAppVersion: 'Register App Version',
    keyLanguageSelect: 'Select key language',
    userId: 'User ID',
    email: 'Email',
    userType: 'User Type',
    updatedAt: 'Updated At',
    createdAt: 'Created at',
    addUserBot: 'Add User Bot',
    changeUser: 'Change User',
    createUser: 'Create',
    currentEmailBot: 'Current User Bot',
    currentIdBot: 'Current User ID',
    changeToEmail: 'Change to Email',
    changeToId: 'Change to ID',
    extendOrders: 'Extend orders',
    expireTime: 'Expire time',
    change: 'Change',
    add: 'Add',
    globalWithdrawal: {
      index: 'Global Withdrawal',
      editModalHeader: 'Update Global Withdrawal Setting',
      usdtFeeSetting: 'Usdt Fee Setting',
    },
    chargeBy: 'Charge By',
    chargeByDefault: 'Default',
    chargeByReward: 'Reward',
    chargeByCastle: 'Castle',
  },
  obmMonitor: {
    counterOrder: 'Counter Order',
    counterId: 'Counter ID',
    recoveryId: 'Recovery ID',
    bceCounterOrderId: 'Counter Order ID',
    bceCounterTargetId: 'Counter Target ID',
    targetExchangeRecoveryId: 'Target Recovery ID',
    targetMatchPrice: 'Target Matched Price',
    bceMatchPrice: 'Matched Price',
    targetMatchVolume: 'Target Matched Volume',
    bceMatchVolume: 'Matched Volume',
    recoveryStatus: 'Recovery Status',
    takeProfit: 'Take Profit',
    rate: 'Rate',
    counterCreateDate: 'Counter Date',
    recoveryTime: 'Recovery Date',
    module: 'Module',
    exchangeTarget: 'Exchange target',
  },
  obmSetting: {
    balanceMonitor: 'Balance monitor',
    thresholdSetting: 'Notification Threshold',
    alert: 'Alert',
    stop: 'Stop',
    adjustBalancePercent: 'Adjust Balance Percent',
    min: 'Alert',
    max: 'Shutdown',
    setting: 'Setting OBM',
    general: 'General',
    botA: 'Bot A',
    botP: 'Bot P',
    crawler: 'Crawler',
    mergeOrderbook: 'Merge orderbook',
    number: 'Number',
    percent: 'Percentage',
    manual: 'Manual',
    auto: 'Auto',
    pair: 'Pair',
    exchange: 'Exchange',
    selectType: 'Select type',
    thresholdVolumeSell: 'Threshold volume sell',
    thresholdVolumeBuy: 'Threshold volume buy',
    thresholdPriceSell: 'Threshold price sell',
    thresholdPriceBuy: 'Threshold price buy',
    limitOrder: 'Limit order',
    decimalMOB: 'Decimal of amount',
    maxAmount: 'Max amount',
    minAmount: 'Min amount',
    maxTotal: 'Max total',
    minTotal: 'Min total',
    orderPeriod: 'Order period',
    volumeScale: 'Volume Scale Crawler(Auto)',
    action: 'Action',
    adjustmentRate: 'Adjustment rate',
    commissionFee: 'Commission fee',
    roundDigits: 'Round digits',
    precision: 'Decimal of price',
    saveOBMSettingSuccess: 'Save OBM setting success!',
    saveObmSettingError: 'Save OBM setting error!',
    systemTarget: 'System target',
    skipVolume: 'Skip min amount rate',
    defaultPrecision: 'Default precision',
  },
  orderType: {
    allType: 'All',
    limit: 'Limit',
    market: 'Market',
    stopLimit: 'Stop Limit',
    stopMarket: 'Stop Market',
  },
  orderSide: {
    allSide: 'All',
    buy: 'BUY',
    sell: 'SELL',
  },
  orderStatus: {
    allStatus: 'All',
    pending: 'Pending',
    filled: 'Filled',
    canceled: 'Canceled',
    processingCancel: 'Processing Cancel',
    partialFilled: 'Partial Filled',
    partialFill: 'Partial Fill',
    error: 'Error',
    stopping: 'Stopping',
    rejected: 'Rejected',
    canceledByAdmin: 'Canceled By Admin',
  },
  exchangeHistory: {
    allPair: 'All',
    pair: 'Pair',
    type: 'Type',
    side: 'Side',
    price: 'Price',
    amount: 'Amount',
    fee: 'Fee',
    total: 'Total',
    email: 'Email',
    orderId: 'Order ID',
    createAt: 'Created at',
    startDate: 'From',
    endDate: 'To',
    emailOrOrderId: 'Email or order ID',
    cancelAll: 'Cancel all',
    reload: 'Reload',
    openOrder: 'Open Order',
    cancel: 'Cancel',
    cancelling: 'Cancelling',
    userId: 'User Id',
    status: 'Status',
    amountAndFilled: 'Amount / Filled',
    priceAndStop: 'Price / Trigger',
    average: 'Average',
    typeAndSide: 'Type / Side',
    orderIdAndPair: 'Order Id / Pair',
    sellFee: 'Sell fee',
    buyFee: 'Buy fee',
    filled: 'Filled',
    sellOrderOrEmail: 'Sell: Order ID / Email',
    buyOrderOrEmail: 'Buy: Order ID / Email',
    tradeId: 'Trade Id',
    success: 'Success!',
    error: 'Error!',
    cancelOrders: 'Cancel Orders',
    keyword: 'Keyword',
    searchType: 'Search by',
    userType: 'User type',
    fromTo: 'Date',
    allUser: 'All',
    notificationSelectPrice:
      '* Filtered {side} order with price at {price} {currency}.',
    searchBy: 'Search by',
    spotWallet: 'Exchange Wallet',
    rewardWallet: 'Reward Wallet',
  },
  highLow: {
    orders: 'Orders',
    transfer: 'Transfer',
    transferMajor: 'Swap',
    transferHistory: 'Transfer history',
    summary: 'Summary',
    detail: 'Detail',
    highLow: 'High & Low',
    history: 'History',
    userBalance: 'User Balance',
    date: 'Date',
    lastMonth: 'Last month',
    thisMonth: 'This month',

    // Leader board
    leaderBoard: 'leaderBoard',

    // History
    mode: 'Mode',
    pair: 'Pair',
    winLose: 'Win/Lose',
    status: 'Status',
    currency: 'Currency',
    from: 'From',
    to: 'To',
    timeFrame: 'Time frame',
    orderID: 'Order id',
    strike: 'Strike',
    startTime: 'Start time',
    expiry: 'Expiry',
    closingRate: 'Closing rate',
    investment: 'Investment',
    investmentType: 'Investment Type',
    expiryPayout: 'Expiry payout',
    buyPayout: 'Buy payout',
    bscastNeed: 'Bcast Need',
    sellPayout: 'Sell Payout',
    cashback: 'Cashback profit/loss',
    balance: 'Balance profit',
    win: 'Win',
    lose: 'Lose',
    opened: 'Opened',
    closed: 'Closed',
    cancelled: 'Cancelled',
    transferDate: 'Transfer Date',
    finished: 'Finished',
    failed: 'Failed',
    success: 'Success',
    pending: 'Pending',
    created: 'Created',

    // Statistic
    period: 'Period',
    orderTimes: 'Order Times',
    userWins: 'User Wins',
    userLose: 'User Loses',
    userWinRates: 'User Win Rates',
    in: 'In',
    out: 'Out',
    payoutRate: 'Payout Rate',
    operating: 'Operating',
    mailAddress: 'Mail Address',
    clear: 'Clear',

    // Suspension
    common: 'Common',
    tradeMode: 'Trade Mode',
    market: 'Market',
    tradingEmergency: 'Trade Mode Emergency Stop Threshold',
    tradingPairEmergency: 'Pair Emergency Stop Threshold',
    tradingEmergencyStopThreshold: 'Trade Emergency Stop Threshold',
    tradingUserProfit: 'Trading Mode User Profit',
    userProfit: 'User Profit Amount',
    pairUserProfit: 'Pair User Profit',
    restrictDate: 'Restrict Date',
    unlimit: 'Unlimit',

    // Winning Rate Analysis
    remainingSeconds: 'Remaining seconds',
    remainingMinutes: 'Remaining minutes',
    remainingHours: 'Remaining hours',
    winTimes: 'Win Times',
    loseTimes: 'Lose Times',
    winRate: 'Win Rate',
    loseRate: 'Lose Rate',
    seconds: 'Seconds',
    minutes: 'Minutes',
    hours: 'Hours',
    day: 'Day',

    // Crawler
    crypto: 'Crypto',
    forex: 'Forex',
    target: 'Target Date',
    exchange: 'Exchange',
    global: 'Global Trend',
    forcedFlag: 'Forced Flag',
    internal: 'Internal',
    same: 'Same',
    up: 'Up',
    down: 'Down',
    blank: 'Blank',
    sameExchange: 'Same Exchange',
    internalActivition: 'Internal Activation',
    '5s': '5s',
    samePrice: 'Same Price',
    time: 'Time',
    finalPrice: 'Final Price',
    adjustmentRate: 'Adjustment Rate',
    bufferRate: 'Buffer Rate',
    selecedExchange: 'Selected Exchange for Internal',
    globalTrend: 'Global Trend',
    second: 'Second',
    minute: 'Minute',
    hour: 'Hour',
    days: 'Days',

    // User Trading Limit
    userProfitAmount: 'User Profit Amount',
    limitedDate: 'Limited Date',
    // Unlimited User
    lastLogin: 'Last Login',
    unlimitedUserRegistrationDate: 'Unlimited User Registration Date',
    registerNewUser: 'Register new user',
    registerUnlimitedUser: 'Register Unlimited User',
    registerZeroFeeUser: 'Register Zero Fee User',
    placeHolderRegister: 'Please input keyword of the user',
    numberOfUsers: 'Number of Users',
    activeUsers: 'Active Users',
    winningUsers: 'Winning Users',
    losingUsers: 'Losing Users',
    totalUserBalance: 'Total User Balance',
    numberOfWithdrawalTimes: 'Number of Withdrawal Times',
    numberOfWithdrawers: 'Number of Withdrawers',
    numberOfDepositors: 'Number of Depositors',
    accumulatedWithdrawalAmount: 'Accumulated Withdrawal Amount',
    averageWithdrawalAmount: 'Average Withdrawal Amount',
    accumulatedDeposits: 'Accumulated Deposits',
    withdrawalRatio: 'Withdrawal Ratio',
    operatingProfit: 'Operating Profit',
    orderLimitUsers: 'Order Limit Users',
    bcastRank: 'BCAST Rank {number}',
    maxPayoutBcastRank: 'Max number purchase payout for rank {number}',
    totalBalance: 'Total Balance',
    winRates: 'Win Rates',
    bcastRanks: 'BCAST Ranks',
    bcastAmount: 'BCAST Amount',
    amount: 'Amount',

    // Block User
    blockUser: 'Block User',
    addBlockUser: 'Add new Block User',
    blockedDate: 'Blocked Date',
    blockSuccess: 'Block {value} success',
    blockFalse: 'User {value} exists. Please select another',
    unBlockSuccess: 'Delete {value} success',
    unBlockFalse: 'Delete {value} false',
    unblock: 'Delete',
    email: 'Email',
    userId: 'User Id',
    reason: 'Reason',
    confirmUnblockUserMessage: 'Do you want to unblock {name}?',

    // Setting Trading
    tomorrow: 'Tomorrow',
    settingPair: 'Setting Pair',
    tradingMode: 'Trading Mode',
    // Grant payout
    noteGrantPayout:
      "Note that you must be aware of the Default payout of every mode an the Rank of your user, then don't grant over the Maximum payout also",
    no: 'No',
    grantPayout: 'Grant Payout',
    updateGrantPayout: 'Update Grant Payout',
    edit: 'Edit',
    enable: 'Enable',
    disable: 'Disable',
    payoutBonus: 'Number of payout',
    grantedDate: 'Granted date',
    bcast: 'BCAST',
    usdt: 'USDT',
    percent: '%',
    payout: 'PAYOUT',
    microsecond: 'Microsecond',
    serverTimeSetting: 'Server time setting',
    weightTime: 'Weight Time',
    getPriceRetryTime: 'Get Price Retry Time',
    commonSetting: 'Common setting',
    thresholdRank1: 'Threshold Rank 1',
    thresholdRank2: 'Threshold Rank 2',
    thresholdRank3: 'Threshold Rank 3',
    tradingLimitActivationThreshold: 'Trading Limit Activation Threshold',
    resellRateCalculation: 'RESELL RATE CALCULATION',
    resellCommissionWin: 'Resell Commission (win)',
    resellCommissionLose: 'Resell Commission (lose)',
    offSpread: 'Off Spread',
    transferSetting: 'Transfer Setting',
    minTransferUsdt: 'Deposit history amount',
    decimalPart: 'Decimal Part',
    highLowSpread: 'High/Low Spread',
    lightningSpread: 'Lightning Spread',
    tradeEmergencyStopThreshold: 'Trade Emergency Stop Threshold',
    updatePair: 'Update Pair',
    insertPair: 'Insert Pair',
    transactionStartTime: 'Transaction Start Time',
    transactionEndTime: 'Transaction End Time',
    defaultPayout: 'Default Payout',
    orderAmountMinimum: 'Order Amount Minimum',
    expiryTimeBeforeReceivingOrder: 'Expiry Time Before Receiving Order',
    generalSetting: 'General Setting',
    sellOPtion: 'Sell Option',
    oddsMode: 'Odds Mode',
    xDay: '[X] Day',
    maximumTimesOrderxDay: 'Maximum Times Order /[X] Day',
    orderAmountMaximumxDay: 'Order Amount Maximum /[X] Day',
    maximumTimesOrderTimeFrame: 'Maximum Times Order /Time Frame',
    orderAmountMaximumTimeFrame: 'Order Amount Maximum /Time Frame',
    orderAmountUnit: 'Order Amount Unit',
    amountSuggestion: 'Amount Suggestion {number}',
    maximumOrderAmountPerOrder: 'Maximum order amount per order',
    maximumBCASTAmountPerOrder: 'Maximum BCAST amount per order',
    oddsFee: 'Odds Fee',
    payoutSetting: 'Payout Setting',
    allowScalingViaUseBCAST: 'Allow Scaling Via Use BCAST',
    scalingValue: 'Scaling Value',
    scalingBCASTUseRateUPNecessary: 'Scaling BCAST Use Rate UP Necessary',
    payoutScalingUnit: 'Payout Scaling Unit',
    payoutMaximum: 'Payout Maximum',
    allowScalingViaHoldingBCAST: 'Allow Scaling Via Holding BCAST',
    limitSetting: 'Limit Setting',
    restricted: '[Restricted][X] Day',
    restrictedMaximumTimesOrderDay: '[Restricted] Maximum Times Order /[X] Day',
    restrictedOrderAmountMaximumDay:
      '[Restricted] Order Amount Maximum /[X] Day',
    diffDirectionInterval: 'Diff direction interval',
    restrictedMaximumTimesOrderTimeFrame:
      '[Restricted] Maximum Times Order /Time Frame',
    restrictedOrderAmountMaximumTimeFrame:
      '[Restricted] Order Amount Maximum /Time Frame',
    sameDirectionInterval: 'Same direction interval',
    emergencySetting: 'Emergency Setting',
    modeTradingEmergencyStopThreshold:
      '[Mode] Trading Emergency Stop Threshold',
    valid: {
      bcashRank2: 'This value must be greater than the Bcast rank1 value.',
      bcashRank3: 'This value must be greater than the Bcast rank2 value.',
      payoutMax: 'This value must be greater than or equal to the {value}.',
      payoutMaxWithoutRankScroling:
        'This value must be greater than or equal to the {defaultPayout}',
      payoutScalingUnit:
        'This value must be a divisor of Max number purchase payout for ranks 1, 2, and 3.',
      payoutScalingUnitOnly: 'This value must be a divisor of {value}',
      isNumber: 'This field must be a number',
      commonFail: 'An error occurred',
      isPositiveNumber: 'This field must be greater than 0',
      currencyExist: 'The currency has already been taken.',
      currencyValue:
        'The decimal currency must be greater than or equal 0 and less than or equal 11.',
      thisFieldIsRequired: 'This field is required',
      isInteger: 'This field must be an integer',
      maxDecimalsPayoutScalingUnit:
        'Decimal of payout scaling unit less than or equal 2',
      thisFieldIsGreaterThan: 'This field must be greater than {value}',
    },
    balanceDecimals: 'Decimals Balance Setting',
    insertsBalanceDecimals: 'Add currency',

    // User balance
    cashbackBalance: 'CASHBACK',

    // Setting crawler
    settingCrawler: 'Setting Crawler',
    min: 'Min',
    max: 'Max',
    internalAdjustmentRate: 'Internal Adjustment Rate',
    selectionRate: 'Selection Rate',
    internalActivation: 'Internal Activation',
    keepTime: 'Keep Time',
    priceKeepModeAdjustmentRate: 'Price Keep Mode Adjustment Rate',
    priceKeepModeActivationRate: 'Price Keep Mode Activation Rate',
    validateMessage: {
      selectionRateMustBe100:
        'Selection Rate: Total selection rate must be 100.',
    },

    // btc transfer
    activeBTCTransfer: 'Active Transfer',
    minimumAmountTransfer: 'Minimum Amount Transfer',
    maximumAmountTransfer: 'Maximum Amount Transfer',
    maximumAmountTransferPerDay: 'Maximum Amount Transfer Per Day',
    btc: 'BTC',
    transferFee: 'Transfer Fee',
    feeAmount: 'Fee Amount',
    minMaxAmount: 'Min-Max amount',
    save: 'Save',
    inBTC: 'In',
    btcTransferFeeNote:
      '*Please enter transfer fee smaller than expected receivable amount of traders to avoid any problems occurred.',
    tableBTC: {
      from: 'From',
      to: 'To',
      user: 'USER',
      BTCTransferAmount: 'TRANSFER AMOUNT',
      BTCTransferCoin: 'TRANSFER CURRENCY',
      USDTReceiveAmount: 'USDT RECEIVE AMOUNT',
      time: 'TIME',
      status: 'STATUS',
      feeAmount: 'FEE AMOUNT',
      created: 'Created',
      pending: 'Pending',
      success: 'Success',
      failed: 'Failed',
    },
  },
  mt5: {
    // Payment
    email: 'Email',
    amount: 'Amount',
    paymentCode: 'Payment Code',
    status: 'Status',
    createdDate: 'Created Date',
    remark: 'Remark',
    edit: 'Edit',
  },
  note: 'Note',

  ggId: 'Google ID',
  fbId: 'Facebook ID',
  appleId: 'Apple ID',
  referralGgId: 'Referral Google ID',
  referralFbId: 'Referral Facebook ID',
  referralAppleId: 'Referral Apple ID',
  config: 'Config',
  columnConfig: 'Column Config',
  createRole: 'Create Role',
  updateRole: 'Update Role',
  permissions: 'Permissions',
  apiAccessPermissions: 'API access permissions',
  screenAccessPermissions: 'Screen access permissions',
  userMapRoleExplain:
    'The user assigned to the roles will inherit all the permissions of the roles.',
  userMapPermissionExplain:
    'If you want to assign permissions directly to the user without going through the role, you can select the permissions below. This is only for special cases.',
  permissionByFeature: 'Permission by Feature',
  permissionByFeatureTooltip:
    'Set permission to use common features. Easy to setup, recommended for normal admins.',
  permissionByApi: 'Permission by API',
  permissionByApiTooltip:
    'Set permission to use system API. Recommended for advanced usage',
  permissionValue: {
    [Permission.CAMPAIGN_GET_LIST_KAFKA_EVENTS]: 'Get list Kafka events',
    [Permission.CAMPAIGN_GET_LIST_GRANT_TARGETS]: 'Get list grant targets',
    [Permission.CAMPAIGN_GET_LIST_USER_CONDITIONS]: 'Get list user conditions',
    [Permission.CAMPAIGN_GET_LIST]: 'Get list campaigns',
    [Permission.CAMPAIGN_CREATE]: 'Create campaign',
    [Permission.CAMPAIGN_READ]: 'View campaign detail',
    [Permission.CAMPAIGN_UPDATE]: 'Update campaign',
    [Permission.CAMPAIGN_DELETE]: 'Delete campaign',
    [Permission.CAMPAIGN_GET_DISPLAY_CONDITIONS]: 'Get list display conditions',
    [Permission.CHANNEL_GET_LIST]: 'Get list channels',
    [Permission.CHANNEL_CREATE]: 'Create channel',
    [Permission.CHANNEL_READ]: 'View channel detail',
    [Permission.CHANNEL_UPDATE]: 'Update channel',
    [Permission.CHANNEL_DELETE]: 'Delete channel',
    [Permission.MISSION_CREATE]: 'Create mission',
    [Permission.MISSION_READ]: 'View mission detail',
    [Permission.MISSION_UPDATE]: 'Update mission',
    [Permission.REJECT_REASON_GET_LIST]: 'Get list rejection reasons',
    [Permission.SETTING_COUNTRY_CODE_GET_LIST]: 'Get list countries',
    [Permission.TAG_GET_LIST]: 'Get list tags',
    [Permission.TAG_CREATE]: 'Create tag',
    [Permission.TAG_READ]: 'View tag detail',
    [Permission.TAG_UPDATE]: 'Update Tag',
    [Permission.TAG_DELETE]: 'Delete Tag',
    [Permission.USER_GET_LIST]: 'Get list users',
    [Permission.USER_READ]: 'View user detail',
    [Permission.USER_EXPORT]: 'Export list users',
    [Permission.USER_MARKETING_GET_LIST]: 'Get list users for marketing',
    [Permission.USER_MARKETING_EXPORT]: 'Export list users for marketing',
    [Permission.USER_INFO_READ]: 'View user info detail',
    [Permission.USER_INFO_READ_HISTORY]: 'View user info history',
    [Permission.USER_KYC_READ]: 'View user KYC detail',
    [Permission.USER_KYC_READ_ENTERPRISE_INFO]: 'View enterprise info',
    [Permission.USER_KYC_READ_SCAN_DATA]: 'View scan data of user KYC',
    [Permission.USER_KYC_RENEW_SCAN_DATA]: 'Renew scan data of user KYC',
    [Permission.USER_KYC_REVIEW]: 'Review user KYC',
    [Permission.USER_KYC_READ_ADMIN_DECISIONS]:
      'View admin decisions with user KYC',
    [Permission.ROLE_GET_LIST]: 'Get list roles',
    [Permission.ROLE_CREATE]: 'Create roles',
    [Permission.ROLE_READ]: 'View role detail',
    [Permission.ROLE_UPDATE]: 'Update role',
    [Permission.ROLE_DELETE]: 'Delete role',
    [Permission.USER_TAG_CREATE]: 'Add tag to user',
    [Permission.USER_TAG_READ]: 'View tags of user',
    [Permission.USER_TAG_DELETE]: 'Remove tag of user',
    [Permission.REWARD_LOG_GET_LIST]: 'Get list missing rewards',
    [Permission.REWARD_LOG_COUNT]: 'Count missing rewards',
    [Permission.REWARD_LOG_RESOLVE]: 'Resolve missing rewards',
    [Permission.COIN_GET_LIST]: 'Get list coins',
    [Permission.COIN_SEARCH]: 'Search for coin',
    [Permission.COIN_SETTINGS_CREATE]: 'Create coin setting',
    [Permission.COIN_SETTINGS_READ]: 'View coin setting detail',
    [Permission.COIN_SETTINGS_UPDATE]: 'Update coin setting',
    [Permission.COIN_SETTINGS_DELETE]: 'Delete coin setting',
    [Permission.PAIR_SETTINGS_CREATE]: 'Create pair setting',
    [Permission.PAIR_SETTINGS_READ]: 'View pair setting',
    [Permission.PAIR_SETTINGS_UPDATE]: 'Update pair setting',
    [Permission.PAIR_SETTINGS_DELETE]: 'Delete pair setting',
    [Permission.PAIR_CATEGORY_SETTINGS_CREATE]: 'Create pair category setting',
    [Permission.PAIR_CATEGORY_SETTINGS_READ]: 'View pair category setting',
    [Permission.PAIR_CATEGORY_SETTINGS_UPDATE]: 'Update pair category setting',
    [Permission.PAIR_CATEGORY_SETTINGS_DELETE]: 'Delete pair category setting',
    [Permission.APP_VERSION_CREATE]: 'Create app version',
    [Permission.APP_VERSION_READ]: 'View app version',
    [Permission.APP_VERSION_UPDATE]: 'Update app version',
    [Permission.APP_VERSION_DELETE]: 'Delete app version',
    [Permission.ADMIN_GET_LIST]: 'Get list admins',
    [Permission.ADMIN_CREATE]: 'Create account for admin',
    [Permission.ADMIN_READ]: 'View admin detail',
    [Permission.ADMIN_UPDATE]: 'Update admin',
    [Permission.ADMIN_SET_PERMISSION]: 'Set permission for admin',
    [Permission.USER_LOGIN_HISTORY_READ]: 'View user login history',
    [Permission.ADMIN_ACTION_LOG_READ]: 'View admin action log history',
    [Permission.WALLET_SETTING_READ]: 'View wallet setting',
    [Permission.WALLET_SETTING_UPDATE]: 'Update wallet setting',
    [Permission.OBM_SETTING_READ]: 'View OBM setting',
    [Permission.OBM_SETTING_UPDATE]: 'Update OBM setting',
    [Permission.OBM_SETTING_DELETE]: 'Delete OBM setting',
    [Permission.USER_EMAIL_CHANGE_HISTORY_READ]:
      'View user email change history',
    [Permission.TOGGLE_BAN_USER]: 'Ban/Unban user',
    [Permission.AUTO_WITHDRAW_GROUP_COMMON]: 'Auto withdraw group',
    [Permission.AUTO_WITHDRAW_GROUP_CREATE_UPDATE]:
      'Create Update withdraw group',
    [Permission.AUTO_WITHDRAW_GROUP_DETAIL]:
      'Get list transaction on auto withdraw detail',
    [Permission.AUTO_WITHDRAW_GENERATE_KEY]: 'Create a private key',
    [Permission.AUTO_WITHDRAW_HEALTH]: 'Get health check',
    [Permission.AUTO_WITHDRAW_CURRENCY]: 'Get token of currency',
    [Permission.AUTO_WITHDRAW_TRANSACTION]: 'Get transaction list API',
    [Permission.IMPORT_BAN_USER]: 'Import CSV to ban Users',
    [Permission.SYSTEM_PUSH_SETTING_READ]:
      'View system push notification setting',
    [Permission.SYSTEM_PUSH_SETTING_UPDATE]:
      'Update system push notification setting',
    // Auto Add
    [Permission.AUTO_ADD_SETTING_CREATE]: 'Auto add new currency',
    [Permission.AUTO_ADD_SETTING_UPDATE]: 'Auto add update currency',
    [Permission.AUTO_ADD_SMART_CONTRACT_GET]:
      'Auto add get smart contract information',
    [Permission.AUTO_ADD_SETTING_LIST]: 'Auto add list currency',
    [Permission.BALANCE_READ]: 'View User Balance Screen',
    [Permission.BALANCE_ADD]: 'Edit balance',
    [Permission.BALANCE_TRANSFER_READ]: 'Get List balance transfer',
    [Permission.BALANCE_TRANSFER_SELF_TRANSFER]: 'View Transfer Balance Screen',
    [Permission.BALANCE_ABNORMAL_READ]: 'View Abnormal Balance Screen',
    [Permission.BALANCE_ABNORMAL_UPDATE]: 'Correct abnormal balance',
    [Permission.BALANCE_FILE_IMPORT_CREATE]: 'Edit balance by import file',
    [Permission.BALANCE_FILE_IMPORT_READ]: 'List balance import file',
    [Permission.BALANCE_FILE_SETTING_READ]: 'List balance import file setting',
    [Permission.BALANCE_FILE_SETTING_CREATE]:
      'Edit balance import file setting',
    [Permission.BALANCE_HISTORY]: 'Balance history',
    [Permission.AUTO_ADD_SETTING_READ]: 'View currency setting',
    [Permission.EXCHANGE_USER_UNLIMITED_READ]: 'View exchange unlimited user',
    [Permission.EXCHANGE_USER_UNLIMITED_UPDATE]:
      'Update exchange unlimited user',
    [Permission.EXCHANGE_USER_ZERO_FEE_READ]: 'View exchange zero fee user',
    [Permission.EXCHANGE_USER_ZERO_FEE_UPDATE]: 'Update exchange zero fee user',
    [Permission.EXCHANGE_USER_BLACK_LIST_READ]: 'View exchange blacklist user',
    [Permission.EXCHANGE_USER_BLACK_LIST_UPDATE]:
      'Update exchange blacklist user',
    [Permission.EXCHANGE_ORDER_READ]: 'View exchange order',
    [Permission.EXCHANGE_ORDER_UPDATE]: 'Update exchange order',
    [Permission.OBM_BOT_READ]: 'View OBM Bot',
    [Permission.OBM_BOT_UPDATE]: 'Update OBM Bot',
    [Permission.HIGH_LOW_CRAWL_SETTING_CREATE]: 'Create crawl setting',
    [Permission.HIGH_LOW_CRAWL_SETTING_DELETE]: 'Delete crawl setting',
    [Permission.HIGH_LOW_CRAWL_SETTING_READ]: 'View crawl setting',
    [Permission.HIGH_LOW_CRAWL_SETTING_UPDATE]: 'Update crawl setting',
    [Permission.HIGH_LOW_NEWS_CREATE]: 'Create news',
    [Permission.HIGH_LOW_NEWS_DELETE]: 'Delete news',
    [Permission.HIGH_LOW_NEWS_READ]: 'View news',
    [Permission.HIGH_LOW_NEWS_UPDATE]: 'Update news',
    [Permission.HIGH_LOW_PAIR_PRICE_CREATE]: 'Create pair price',
    [Permission.HIGH_LOW_PAIR_PRICE_DELETE]: 'Delete pair price',
    [Permission.HIGH_LOW_PAIR_PRICE_READ]: 'View pair price',
    [Permission.HIGH_LOW_PAIR_PRICE_UPDATE]: 'Update pair price',
    [Permission.HIGH_LOW_PAIR_SETTING_CREATE]: 'Create pair setting',
    [Permission.HIGH_LOW_PAIR_SETTING_DELETE]: 'Delete pair setting',
    [Permission.HIGH_LOW_PAIR_SETTING_READ]: 'View pair setting',
    [Permission.HIGH_LOW_PAIR_SETTING_UPDATE]: 'Update pair setting',
    [Permission.HIGH_LOW_SETTING_CREATE]: 'Create setting',
    [Permission.HIGH_LOW_SETTING_DELETE]: 'Delete setting',
    [Permission.HIGH_LOW_SETTING_READ]: 'View setting',
    [Permission.HIGH_LOW_SETTING_UPDATE]: 'Update setting',
    [Permission.HIGH_LOW_TRADING_MODE_CREATE]: 'Create trading mode',
    [Permission.HIGH_LOW_TRADING_MODE_DELETE]: 'Delete trading mode',
    [Permission.HIGH_LOW_TRADING_MODE_READ]: 'View trading mode',
    [Permission.HIGH_LOW_TRADING_MODE_UPDATE]: 'Update trading mode',
    [Permission.HIGH_LOW_TRADING_PAIR_CREATE]: 'Create trading pair',
    [Permission.HIGH_LOW_TRADING_PAIR_DELETE]: 'Delete trading pair',
    [Permission.HIGH_LOW_TRADING_PAIR_READ]: 'View trading pair',
    [Permission.HIGH_LOW_TRADING_PAIR_UPDATE]: 'Update trading pair',
    [Permission.HIGH_LOW_UNLIMITED_USER_CREATE]: 'Create unlimited user',
    [Permission.HIGH_LOW_UNLIMITED_USER_DELETE]: 'Delete unlimited user',
    [Permission.HIGH_LOW_UNLIMITED_USER_READ]: 'View unlimited user',
    [Permission.HIGH_LOW_UNLIMITED_USER_UPDATE]: 'Update unlimited user',
    [Permission.HIGH_LOW_USER_BALANCE_READ]: 'View user balance',
    [Permission.HIGH_LOW_USER_TRADING_READ]: 'View user trading',
    [Permission.HIGH_LOW_WINNING_RATE_READ]: 'View winning rate',
    [Permission.HIGH_LOW_BLOCK_USER_CREATE]: 'Create block user',
    [Permission.HIGH_LOW_BLOCK_USER_DELETE]: 'Delete block user',
    [Permission.HIGH_LOW_BLOCK_USER_READ]: 'View block user',
    [Permission.HIGH_LOW_USER_GRANT_PAYOUT_CREATE]: 'Create user grant payout',
    [Permission.HIGH_LOW_USER_GRANT_PAYOUT_DELETE]: 'Delete user grant payout',
    [Permission.HIGH_LOW_USER_GRANT_PAYOUT_READ]: 'View user grant payout',
    [Permission.HIGH_LOW_USER_GRANT_PAYOUT_UPDATE]: 'Update user grant payout',
    [Permission.MULTI_LANGUAGE_IMPORT_TRANSLATE]: 'Import Translate',
    [Permission.MULTI_LANGUAGE_GET_TRANSLATES]: 'Get Translates',
    [Permission.MULTI_LANGUAGE_SET_TRANSLATE]: 'Set Translate',
    [Permission.MULTI_LANGUAGE_LIST_LANGUAGE]: 'List Language',
    [Permission.MULTI_LANGUAGE_SET_LANGUAGE]: 'Set Language',
    [Permission.MULTI_LANGUAGE_EXPORT_ALL_TRANSLATE]: 'Export All Translate',
    [Permission.API_MANAGEMENT_LIST]: 'List API Management',
    [Permission.API_MANAGEMENT_DETAIL]: 'Detail API Management',
    [Permission.API_MANAGEMENT_CHANGE_STATUS]: 'Change Status API Management',
    [Permission.GLOBAL_NOTIFICATION_CREATE]: 'Create general notification',
    [Permission.GLOBAL_NOTIFICATION_READ]: 'View general notification',
    [Permission.GLOBAL_NOTIFICATION_UPDATE]: 'Update general notification',
    [Permission.NOTIFICATION_CATEGORY_READ]: 'View notification categories',

    // Dividend
    [Permission.DIVIDEND_GET_LIST]: 'Get list dividend',
    [Permission.DIVIDEND_GET_DETAIL]: 'Get detail dividend',
    [Permission.DIVIDEND_GET_CAMPAIGN_NAME]: 'Get all dividend campaign name',
    [Permission.DIVIDEND_GET_CODE_LIST]: 'Get list code',
    [Permission.DIVIDEND_GET_ADVANCED]: 'Get advanced',
    [Permission.DIVIDEND_CREATED]: 'Create dividend',
    [Permission.DIVIDEND_UPDATE]: 'Update dividend',
    [Permission.DIVIDEND_CANCEL]: 'Cancel dividend',
    [Permission.DIVIDEND_CREATE_CODE]: 'Create code',
    [Permission.DIVIDEND_TOOGLE_CODE]: 'Enable/disable code',
    [Permission.DIVIDEND_GET_HISTORY]: 'Get dividend history',
    [Permission.DIVIDEND_GET_LIST_USER_DISABLE]: 'Get list user disabled',
    [Permission.DIVIDEND_DISABLE_USER]: 'Disable user',
    [Permission.DIVIDEND_DELETE_DISABLE_USER]: 'Delete disable user',

    [Permission.USER_NOTE_CREATE]: 'Create note',
    [Permission.USER_NOTE_READ]: 'View note',

    [Permission.USER_AUTHENTICATOR_RESET]: 'Reset authenticator',

    [Permission.USER_BALANCE_CHANGE_HISTORY]: 'User balance change history',

    [Permission.USER_CHANGE_EMAIL]: 'Change email of user',

    // Spot grid trading setting
    [Permission.GRID_TRADING_SETTING_READ]: 'View grid trading setting',
    [Permission.GRID_TRADING_SETTING_UPDATE]: 'Edit grid trading setting',
    // Spot grid trading
    [Permission.GRID_TRADING_READ]: 'View grid trading',

    // FUTURE
    [Permission.FUTURES_ORDER_READ]: 'View future order',
    [Permission.FUTURES_ORDER_UPDATE]: 'Update future order',
    [Permission.FUTURES_USER_READ]: 'View future user',
    [Permission.FUTURES_OPEN_POSITION_READ]: 'View future open position',
    [Permission.FUTURES_SETTINGS_LIST]: 'View future setting',

    // MT5
    [Permission.MT5_PAYMENT_ECHELON_PAYOUT_READ]: 'Read payout list',
    [Permission.MT5_PAYMENT_ECHELON_PAYOUT_ADMIN_APPROVE_REQUEST]:
      'Approve payout request (echelonPay)',
    [Permission.MT5_PAYMENT_ECHELON_PAYOUT_ADMIN_REJECT_REQUEST]:
      'Reject payout request (echelonPay)',
    [Permission.MT5_PAYMENT_ECHELON_PAYIN_READ]: 'Read payin list',
    [Permission.MT5_PAYMENT_ECHELON_PAYIN_ADMIN_APPROVE_REQUEST]:
      'Approve payin request (echelonPay)',
    [Permission.MT5_PAYMENT_ECHELON_PAYIN_ADMIN_REJECT_REQUEST]:
      'Reject payin request (echelonPay)',

    [Permission.USER_CHANGE_EMAIL]: 'Reject payout request (echelonPay)',
    [Permission.USER_INFO_UPDATE]: 'Update user info',

    // CASTLE Convert Setting
    [Permission.BALANCE_CONVERT_SETTING_GET_LIST]: 'Get list convert setting',
    [Permission.BALANCE_CONVERT_SETTING_GET_LOGS]: 'Get setting change history',
    [Permission.BALANCE_CONVERT_SETTING_GET_DETAIL]:
      'Get detail convert setting',
    [Permission.BALANCE_CONVERT_SETTING_CREATE]: 'Create convert setting',
    [Permission.BALANCE_CONVERT_SETTING_UPDATE]: 'Update convert setting',
    [Permission.BALANCE_CONVERT_SETTING_DELETE]: 'Delete convert setting',

    // Reason
    permissionModule: {
      reason: 'Reason Module',
    },
    [Permission.USER_REASON_CREATE]: 'Create rejection reason',
    [Permission.USER_REASON_UPDATE]: 'Update rejection reason',
    [Permission.USER_REASON_GET_LIST]: 'View list rejection reason',
    [Permission.USER_REASON_DELETE]: 'Delete rejection reason',
    [Permission.USER_REASON_CATEGORY_CREATE]: 'Create reason category',
    [Permission.USER_REASON_CATEGORY_UPDATE]: 'Update reason category',
    [Permission.USER_REASON_CATEGORY_GET_LIST]: 'Get list reason category',
    [Permission.USER_REASON_CATEGORY_DELETE]: 'Delete reason category',

    // Convert History
    [Permission.BALANCE_SWAP_HISTORY]: 'Get convert history of users',
    [Permission.BALANCE_TRANSFER_HISTORY]: 'Get transfer history of users',
    [Permission.BALANCE_CONVERT_SMALL_HISTORY]:
      'Get convert small coin history of users',
  },
  permissionModule: {
    campaign: 'Campaign',
    channel: 'Channel',
    mission: 'Mission',
    rejectionReason: 'Rejection Reason',
    setting: 'Setting',
    tag: 'Tag',
    user: 'User',
    userInfo: 'User Info',
    userKyc: 'User KYC',
    userTag: 'Tags of User',
    marketing: 'Marketing',
    coin: 'Coin',
    appVersion: 'App Version',
    adminAccountAndPermission: 'Accounts & Permissions',
    history: 'History',
    obmSetting: 'OBM setting',
    walletSetting: 'Wallet Setting',
    autoWithdraw: 'Auto withdraw',
    notification: 'Notification',
    autoAdd: 'Auto Add',
    balance: 'Balance',
    exchangeSetting: 'Exchange Setting',
    exchange: 'Exchange',
    highLow: 'High & Low',
    languageSetting: 'Language Setting',
    apiKeyManagement: 'API Key Management',
    groupNotification: 'General Notification',
    notificationCategory: 'Notification Category',
    wallet: 'Wallet',
    dividend: 'Dividend',
    userNote: 'User Note',
    userAuthenticator: 'User Authenticator',
    spotGridSetting: 'Spot Grid Setting',
    spotGrid: 'Spot Grid',
    futures: 'FUTURES',
    balanceConvert: 'Convert Setting',
    balanceConvertHistory: 'Convert History',
  },
  screenValue: {
    [Screen.ROLE_LIST]: 'Role list',
    [Screen.ROLE_CREATE]: 'Role create',
    [Screen.ROLE_UPDATE]: 'Role update',
    [Screen.USER_BASIC_INFO]: 'Basic information',
    [Screen.USER_LIST_ACCOUNT_LV]: 'List account level',
    [Screen.USER_DETAIL]: 'User detail',
    [Screen.USER_KYC_NEED_TO_APPROVE]: 'List Need To Approve',
    [Screen.USER_KYC_REVIEW_OCR]: 'User KYC review OCR',
    [Screen.CAMPAIGN_LIST]: 'Campaign list',
    [Screen.USER_KYC_REVIEW_RISK]: 'Uer KYC Review risk rating',
    [Screen.CAMPAIGN_DETAIL]: 'Campaign detail',
    [Screen.USER_TAG_LIST]: 'User tag list',
    [Screen.CHANNEL_LIST]: 'Channel list',
    [Screen.SETTING_TRADING]: 'Setting trading',
    [Screen.SETTING_COIN]: 'Setting coin',
    [Screen.SETTING_COIN_CATEGORY]: 'Setting coin category',
    [Screen.APP_VERSION_SETTING]: 'Setting app version',
    [Screen.OBM_SETTING_GENERAL]: 'OBM setting general',
    [Screen.OBM_SETTING_SYS_TARGET]: 'OBM setting SYS target',
    [Screen.OBM_SETTING_BALANCE]: 'OBM setting balance',
    [Screen.OBM_SETTING_THRESHOLD]: 'OBM setting OBM',
    [Screen.HISTORY_LOGIN]: 'Login history',
    [Screen.ADMIN_ACTION_LOG]: 'Admin action log',
    [Screen.ADMIN_LIST]: 'Admin list',
    [Screen.ADMIN_PERMISSION]: 'Admin permission',
    [Screen.MISSING_REWARDS_LIST]: 'Missing reward list',
    [Screen.WALLET_MOTHER_WALLET_INCIDENT_COLLECTION]:
      'Wallet mother wallet incident collection',
    [Screen.WALLET_DEPOSIT_INCIDENT_COLLECTION]:
      'Wallet deposit incident collection',
    [Screen.WALLET_MOTHER_WALLET_LIST]: 'Wallet mother wallet list',
    [Screen.WALLET_WITHDRAW_WALLET_LIST]: 'Wallet withdraw wallet list',
    [Screen.WALLET_DEPOSIT_WALLET_LIST]: 'Wallet deposit wallet list',
    [Screen.WALLET_MOTHER_WALLET_SETTING]: 'Wallet mother wallet setting',
    [Screen.WALLET_BLACKLIST]: 'Wallet blacklist',
    [Screen.WALLET_WITHDRAW_SETTING]: 'Wallet withdraw setting',
    [Screen.WALLET_DEPOSIT_SETTING]: 'Wallet deposit setting',
    [Screen.SYSTEM_PUSH_SETTING]: 'System push notification setting',
    [Screen.API_MANAGEMENT_LIST]: 'API Management',
    [Screen.MT5_PAYMENT_PAYOUT]: 'MT5 Payout screen',
  },
  screenModule: {
    campaign: 'Campaign',
    channel: 'Channel',
    mission: 'Mission',
    rejectionReason: 'Rejection Reason',
    setting: 'Setting',
    tag: 'Tag',
    user: 'User',
    userInfo: 'User Info',
    userKyc: 'User KYC',
    userTag: 'Tags of User',
    marketing: 'Marketing',
    coin: 'Coin',
    coinSetting: 'Coin Setting',
    pairSetting: 'Pair Setting',
    pairCategorySetting: 'Pair Category Setting',
    appVersion: 'App Version',
    adminAccountAndPermission: 'Accounts & Permissions',
    history: 'History',
    obmSetting: 'OBM setting',
    wallet: 'Wallet',
    walletSetting: 'Wallet Setting',
    role: 'Role (s)',
    admin: 'Admin',
    app: 'App',
    notificationSetting: 'Notification Setting',
  },
  requireApiPermissions: 'Require API permissions',
  checkAll: 'Check All',
  expandAll: 'Expand All',
  roles: 'Roles',
  featureValue: {
    [Feature.REVIEW_KYC]: 'Review KYC',
    [Feature.MANAGE_MARKETING_FUNCTION]: 'Marketing Functions',
    [Feature.MANAGE_ADMIN_ACCOUNT_AND_PERMISSION]:
      'Manage Admin Accounts & Permissions',
    [Feature.MANAGE_WALLET_SETTING]: 'Manage Wallet Settings',
    [Feature.OBM_SETTING]: 'OBM setting',
  },
  createAdmin: 'Create Admin',
  ip: 'IP',
  from: 'From',
  security: 'Security',
  changePassword: 'Change Password',
  currentPassword: 'Current Password',
  newPassword: 'New Password',
  passwordConfirmation: 'Password Confirmation',
  balance: 'Balance',
  actualBalance: 'Actual Balance',
  availableBalance: 'Available Balance',
  userBalance: {
    total: 'Total',
    futureBalance: 'FUTURE Balance',
    exchangeBalance: 'EXCHANGE Balance',
    highlowBalance: 'HIGH&LOW Balance',
    rewardBalance: 'REWARD Balance',
    cashbackBalance: 'CASHBACK Balance',
    userBalance: 'User Balance',
    balanceHistory: 'Balance History',
    transferBalance: 'Transfer Balance',
    balanceMonitoring: 'Balance Monitoring',
    abnormalBalanceAccounts: 'Abnormal Balance Accounts',
    balanceUpdateHistory: 'Abnormal Balance Details',
    correct: 'Correct',
    balanceChange: 'Balance Change',
    checkBalance: {
      button: 'Check Balance',
      title: 'Check Balance',
      successMessage: 'Check balance success.',
      errorMessage: 'Check balance failed.',
    },
    correctBalance: {
      button: 'Correct Balance',
      title: 'Correct Balance',
      actualBalance: 'Actual Balance',
      availableBalance: 'Available Balance',
      onHoldTransaction: 'On Hold Transaction',
      sumBalanceTransaction: 'Sum Balance Transaction',
      correctOption: 'Correct Option',
      trustBalanceTransaction: '①Trust Transaction Balance',
      trustBalanceAccount: '②Trust Actual Balance',
      trustBalanceTransactionNote:
        '*Option ①: Will correct Balance account according to balance transaction',
      trustBalanceAccountNote:
        '*Option ②: Will correct Balance transaction according to Balance account',
      correctReason: 'Correct Reason',
      trustBalanceTransactionConfirm:
        'Balance account will be correct according to Balance transaction as follows:',
      trustBalanceAccountConfirm:
        'Balance transaction will be correct according to Balance account as follows:',
      trustBalanceTransactionSuccess: 'Correct Balance account successfully',
      trustBalanceAccountSuccess: 'Correct Balance transaction successfully ',
      errorMessage: 'Correct balance failed',
      validation: {
        CHANGE_ACTUAL_BALANCE_IS_FIXED_NUMBER:
          'Balance Correct must be a number',
        CHANGE_AVAILABLE_BALANCE_IS_FIXED_NUMBER:
          'Available Balance Correct must be a number',
      },
    },
    error: {
      amountRequired: 'Amount is required.',
      balanceChangeRequired:
        'Balance Change is required. Please enter a number other than 0.',
      notEnoughBalance: 'You have not enough balance.',
      INSUFFICIENT_BALANCE: 'Not enough balance deduction.',
    },
    message: {
      confirmUpdate: 'Are you sure to update balance?',
      confirmTransfer: 'Are you sure to transfer balance?',
    },
  },
  transferBalance: {
    transfer: 'Transfer',
    from: 'From',
    to: 'To',
  },
  dividend: 'Dividend',
  emailHistory: 'Email History',
  kycHistory: 'KYC History',
  oldEmail: 'Old Email',
  newEmail: 'New Email',
  close: 'Close',
  ban: 'Ban',
  unban: 'Unban',
  confirmBanMessage: 'Do you really want to ban this account?',
  confirmUnbanMessage: 'Do you really want to unban this account?',
  alreadyUnbanMessage: 'This account has been already unbanned!',
  alreadyBanMessage: ' This account has been already banned!',
  autoWithdraw: {
    groupTitle: 'Group withdrawal',
    groupName: 'Group name',
    maxOfTransactions: 'Max transactions',
    numberOfTransactions: 'Number of transactions',
    currentBalance: 'Current balances',
    nativeCurrentBalance: 'Eth balance',
    suggestedFee: 'Suggested fee',
    suggestedDeposit: 'Suggested deposit',
    totalBalances: 'Total balances',
    status: 'Status',
    currency: 'Currency',
    createdAt: 'Created at',
    search: 'Search',
    create: 'Create group',
    popupTitle: 'Withdraw group',
    detail: 'Detail',
    list: 'Auto Withdrawal list',
    transactionId: 'Transaction ID',
    transactionStatus: 'Transaction status',
    email: 'Email',
    toAddress: 'To address',
    amount: 'Amount',
    transactionHash: 'Transaction hash',
    transactionError: 'Error',
    hwAddress: 'HW address',
    actionDelete: 'Delete',
    actionImport: 'Import',
    actionSave: 'Save',
    actionSend: 'Send',
    actionCollection: 'Collection',
    actionCancel: 'Cancel',
    fileEmpty: 'File empty',
    fileTooLarge: 'Exceed 500 records',
    addGroupSuccess: 'Add group success',
    addGroupFail: 'Add group fail',
    confirmCancelGroup: 'Do you want to cancel this group?',
    saveTransactionsSuccess: 'Save transactions success',
    saveTransactionsFail: 'Save transactions fail',
    sendTransactionsSuccess: 'Send transactions success',
    sendTransactionsFail: 'Send transactions fail',
    confirmSendTransaction: 'Do you want to send transactions?',
    cancelTransactionsSuccess: 'Cancel transactions success',
    cancelTransactionsSuccessWithHash:
      'This group has been cancelled. Please check blockchain transaction information',
    cancelTransactionsFail: 'Cancel transactions fail',
    importedTransactions:
      'List of transactions that have been imported in another group',
    confirmCollectGroup: 'Do you want to collect this group?',
    collectTransactionsFail: 'Collect transactions fail',
    collectTransactionsSuccess:
      'This group has been collected. Please check blockchain transaction information',
    noSatisfyTransactions: 'No transactions satisfy the condition',
    xrpNeedMaintenanceFee: 'XRP case need extra maintenance fee is 10XRP',
  },
  campaignDefault: 'Default',
  campaignDaily: 'Daily',
  type: 'Type',
  resetDailyTime: 'Reset daily time',
  compareFace: 'Compare Face',
  hasDuplicateFaces: 'Has Duplicate Faces',
  livenessCheck: 'Liveness Check',
  identityDocumentVerification: 'ID Document Verification',
  imageProcessDetailTab: {
    [ImageProcessDetailTab.COMPARE_STATUS]: 'Compare Face vs Document',
    [ImageProcessDetailTab.DUPLICATE_STATUS]: 'Check for duplicate',
    [ImageProcessDetailTab.LIVENESS_STATUS]: 'Liveness Check',
    [ImageProcessDetailTab.IDENTTITY_DOCUMENT_VERIFICATION_STATUS]:
      'ID Document Verification',
  },
  imageProvider: {
    [KycImageProvider.CYNOPSIS]: 'Cynopsis',
    [KycImageProvider.AMAZON]: 'Amazon Rekognition',
    [KycImageProvider.SUMSUB]: 'Sumsub',
  },
  similarity: 'Similarity',
  showOtherUsersWhoUsesThisImage: 'Show other users who uses this image',
  detectedAt: 'Detected at',
  ipAddress: 'IP Address',
  importListToBan: {
    status: {
      waiting: 'WAITING',
      success: 'SUCCESS',
      fail: 'FAIL',
      userNotFound: 'USER NOT FOUND',
      duplicatedBanned: 'DUPLICATED BANNED',
      processing: 'PROCESSING',
    },
    adminActionId: 'Admin Action ID',
    requestTime: 'Request Time',
    banTime: 'Ban Time',
    adminId: 'Admin ID',
    UPLOAD_FILE: {
      UPLOAD_FAIL: 'upload fail!',
      METADATA_NOT_SUPPORTED: 'metadata not supported',
      WRONG_FILE_TYPE: 'Please upload file with CSV format',
      BLANK_FILE: 'Blank file, please upload file with valid content',
      OVER_ROWS: 'File contains over 10.000 rows',
      OVER_1MB: 'File size is over 1MB',
    },
  },
  showBanned: 'Show User Banned',
  requireApiScreens: 'Require API screens',
  numericOrder: 'No',
  lang: {
    en: 'English',
    ja: 'Japan',
    zh: 'Chinese',
  },
  title: 'Title',
  content: 'Content',
  variables: 'Variables',
  blacklistUser: {
    add: 'REGISTER A NEW BLACK LIST USER',
    update: 'UPDATE BLACK LIST USER',
  },
  unlimitedUser: {
    add: 'REGISTER A NEW UNLIMITED USER',
    update: 'UPDATE UNLIMITED USER',
  },
  zeroFeeUser: {
    add: 'REGISTER A NEW ZERO FEE USER',
    update: 'UPDATE ZERO FEE USER',
  },
  marketMaker: {
    pair: 'Pair',
    importData: 'Import Data',
    settings: 'Settings',
    importOrderbook: 'Import Orderbook',
    importOrder: 'Import order',
    createProcess: 'Create process',
    cancelProcess: 'Cancel process',
    createOrderDetail: 'Create order detail',
    cancelOrderDetail: 'Cancel order detail',
    pricePrecision: 'Price Precision',
    volumePrecision: 'Volume Precision',
    minAmount: 'Min Amount',
    maxAmount: 'Max Amount',
    minTotal: 'Min Total',
    spreadPrice: 'Spread Price',
    volumeScale: 'Volume Scale',
    orderCountPackage: 'Order Count Package',
    version: 'Version',
    systemTarget: 'System Target',
    editExchangeSetting: 'Edit Exchange Setting',
    onOff: 'ON/OFF',
    generateDataV2: 'Generate Data V2',
  },
  BTCTransfer: {
    fee: 'This Fee Amount cannot greater than 99%',
    minMax:
      'This Minimum Amount Transfer cannot greater than Maximum Amount Transfer',
    minMaxFee: 'This Min Fee cannot greater than Max Fee',
    formRequired: {
      minimum_amount_transfer_required:
        'Minimum Amount Transfer is a required field',
      maximum_amount_transfer_required:
        'Maximum Amount Transfer is a required field',
      fee_amount_required: 'Fee Amount is a required field',
      btc_transfer_min_fee_required: 'Min is a required field',
      btc_transfer_max_fee_required: 'Max is a required field',
    },
  },
  currencyScreen: {
    listCurrency: 'List Currency',
    coin: 'Coin',
    coinName: 'Coin Name',
    network: 'Network',
    siteAddress: 'Site Address',
    detail: 'Detail',
    deposit: 'Deposit',
    withdraw: 'Withdraw',
    editBtn: 'Edit',
    activeBtn: 'Active',
    activeCurrency: 'Active currency',
    changeStatusFail: 'An error occurred',
    changeStatusSuccess: 'Update successful',
    enableDepositConfirm: 'Do you want to enable Deposit function?',
    disableDepositConfirm: 'Do you want to disable Deposit function?',
    enableWithdrawalConfirm: 'Do you want to enable Withdraw function?',
    disableWithdrawlConfirm: 'Do you want to disable Withdraw function?',
    settingScreen: {
      registerCurrencyBtn: 'Register new currency',
      registerERCBEP20Btn: 'Register new ERC2 & BEP20',
      downCurrencyBtn: 'Down currency',
    },
    registerNewCurrencyScreen: {
      addCurrencyTitle: 'Add Currency',
      type: 'Type',
      notWallet: 'NOT WALLET',
      contractAddress: 'Contract Address',
      token: 'Token',
      tokenName: 'Token Name',
      icon: 'Icon',
      env: 'ENV',
      decimals: 'Decimals',
      requiredConfirmations: 'Required confirmations',
      transactionExplorer: 'Transaction explorer',
      transactionPath: 'Transaction path',
      nextBtn: 'Next',
      backBtn: 'Back',
      registerBtn: 'Register',
      withdrawalInformationTitle: 'Withdrawal information',
      minimumWithdrawal: 'Minimum withdraw',
      fee: 'Fee',
      withdrawalLimit: 'Withdrawal limit',
      timeReset: 'Time Reset',
      withdrawalThresholdTitle: 'Auto withdrawal threshold',
      withdrawalThreshold: 'Withdrawal threshold',
      minorPriceTitle: 'Minor Prices',
      price: 'Price',
      addCurrencyWarning:
        'Warning: Register new currency function is not supported by wallet service',
      filePngRequired: 'The image must be a file of type: png',
      chooseFile: 'Choose file',
      uploadFileFail: 'There was an error uploading',
      registerFail: 'An error occurred',
      validateSchema: {
        type_required: 'The type field is required.',
        contract_address_required: 'The contract address field is required.',
        contract_address_invalid: 'The contract address is invalid.',
        contract_address_special:
          'The contract address does not include special characters.',
        contract_address_exist: 'The contract address has already been taken.',
        coin_required: 'The coin field is required.',
        coin_special: 'The coin does not include special characters.',
        coin_exist: 'The coin has already been taken.',
        coin_name_required: 'The coin name field is required.',
        coin_name_special: 'The coin name does not include special characters',
        coin_name_exist: 'The coin name has already been taken.',
        icon_required: 'The icon field is required.',
        image_png: 'The image must be a file of type png.',
        decimals_required: 'The decimals field is required.',
        env_required: 'The env field is required.',
        confirmations_required: 'The required confirmations field is required.',
        confirmations_integer: 'The required confirmations field is integer.',
        exploder_required: 'The transaction explorer field is required.',
        exploder_url:
          'The transaction explorer format field is not a valid URL.',
        transaction_path_required: 'The transaction path field is required.',
        transaction_path_url:
          'The transaction path format field is not a valid URL.',
        minimum_withdrawal_required: 'The minimum withdraw field is required.',
        fee_required: 'The fee field is required.',
        time_reset_required: 'The time reset field is required.',
        withdrawal_threshold_required:
          'The withdrawal threshold field is required.',
        withdrawal_threshold_greater:
          'The withdrawal threshold must be greater than or equal minimum withdrawal.',
        price_required: 'The price (USD) field is required.',
        withdrawal_limit_required: 'The withdrawal limit field is required.',
        withdrawal_limit_greater:
          'The withdrawal limit must be greater than or equal minimum withdrawal.',
      },
    },
    registerSuccess: {
      title: 'Successfully registered currency',
      html: `Deposit withdraw values have been set to default.</br> You can edit those values in the wallet setting screen`,
      confirmButtonText: 'Deposit Setting',
      cancelButtonText: 'Auto Withdraw Setting',
    },
    downCurrencyModal: {
      title: 'down currency',
      notice:
        'When Down currency, deposit, withdraw, trading pair functions of this coin will be blocked. This coin will not be displayed anywhere on the user screen.',
    },
    activeCurrencyModal: {
      title: 'active currency',
      notice:
        'When active currency, Deposit, Withdraw functions will be restored on the user screen.',
    },
    editCurrencyModal: {
      title: 'edit currency',
      editCurrencyFail: 'An error occurred',
      editCurrencySuccess: 'Update successful',
    },
  },
  autoWithdrawThresholdWarning:
    'Please change the setting on V2 wallet setting too if you change this value',
  accountStatus: 'Account Status',
  accountStatusValue: {
    [UserStatus.ACTIVE]: 'Active',
    [UserStatus.INACTIVE]: 'Deleted',
    [UserStatus.PENDING_DELETE]: 'Pending delete',
  },
  languageSetting: {
    UPLOAD_FILE: {
      UPLOAD_FAIL: 'upload fail!',
      METADATA_NOT_SUPPORTED: 'metadata not supported',
      WRONG_FILE_TYPE: 'Please upload file with CSV format',
      BLANK_FILE: 'Blank file, please upload file with valid content',
      OVER_ROWS: 'File contains over 10.000 rows',
      OVER_1MB: 'File size is over 1MB',
      WRONG_HEADER: 'Header file is not correct',
    },
    actionImport: 'Import',
    service: 'Service',
    module: 'Module',
    screen: 'Screen',
    type: 'Type',
    key: 'Key',
    createTranslate: 'Create Translate',
    editTranslate: 'Edit Translate',
    addTranslate: 'Add Translate',

    createLanguageSuccess: 'Create Language Success',
    createLanguageFailed: 'Create Language Failed',

    createTranslateSuccess: 'Create Translate Success',
    createTranslateFailed: 'Create Translate Failed',

    updateTranslateSuccess: 'Update Translate Success',
    updateTranslateFailed: 'Update Translate Failed',

    updateLanguageSuccess: 'Update Language Success',
    updateLanguageFailed: 'Update Language Failed',

    previewImportedFile: 'Preview Imported file',
    applyAll: 'Apply All',
    actionExport: 'Export All',
    editLanguage: 'Edit Language',
    addLanguage: 'Add Language',
    languageCode: 'Language Code',
    languageName: 'Language Name',
    enableLanguage: 'Enable',
    disableLanguage: 'Disable',
    content: 'Content',
    applyAllSuccess: 'Import successful, please refresh list in a few minutes',
  },
  result: 'Result',
  rejectType: 'Reject Type',
  addedDate: 'Added Date',
  resolution: 'Resolution',
  size: 'Size',
  imageType: 'Image Type',
  camera: 'Camera',
  addedFrom: 'Added From',
  missing: 'Missing',
  madeBy: 'Made By',
  auto: 'Auto',
  applicantID: 'Applicant ID',
  apiKeyManagement: {
    enableStatus: 'Enable',
    disableStatus: 'Disable',
    apiName: 'Name of API Key',
    apiKey: 'API Key',
    apiRestriction: 'API Scopes',
    detailApiKey: 'Detail API Key',
    comment: 'Comment',
    approveRequestFailed: 'Update Status Failed',
    approveRequestSuccess: 'Update Status Success',
    histories: 'Histories',
    searchByApiName: 'Search by Api Name',
    searchByEmail: 'Search by Email',
  },
  'push?': 'Push?',
  'sendMail?': 'Send Mail?',
  publishAt: 'Publish at',
  on: 'ON',
  off: 'OFF',
  UPLOAD_FILE: {
    UPLOAD_FAIL: 'Upload fail!',
  },
  pushNotification: 'Push Notification',
  contentForPushNotification: 'Content for Push Notification',
  now: 'Now',
  laterAt: 'Later at',
  publish: 'Publish',
  imageNotDuplicate: 'Image Not Duplicate',
  duplicateType: 'Duplicate Type',
  view: 'View',
  waiting: 'Waiting',
  sent: 'Sent',
  title_en: 'English title',
  title_ja: 'Japan title',
  content_en: 'English content',
  content_ja: 'Japan content',
  pushSentAt: 'Push sent at',
  mailSentAt: 'Mail sent at',
  datePickerSeparator: 'To',
  contentForWeb: 'Content for Web',
  dropFileHereOrClickToUpload: 'Drop file here or click to upload',
  dividendScreen: {
    statusList: {
      cancelled: 'Cancelled',
      executing: 'Executing',
      finished: 'Finished',
      pending: 'Pending',
      running: 'Preparing to run',
    },
    allocateStatusList: {
      no_allocate: 'No Allocate',
      allocated: 'Allocated',
    },
    calculatedMode: {
      non_condition: 'Fixed Amount',
      single: 'Single interest',
      multiple: 'Multiple interest',
    },
    span: {
      once: 'Once',
      daily: 'Daily interest',
      monthly: 'Monthly interest',
      yearly: 'Yearly interest',
    },
    dividendCalculatedMode: {
      single: 'Single interest',
      multiple: 'Multiple interest',
      non_condition: 'Fixed Amount',
    },
    distributeTypes: {
      input_code: 'Input Code',
      non_indicated_balance: 'Unconditional Balance',
      indicated_balance: 'Conditional Balance',
    },

    // Dividend list
    dividendList: 'Dividend List',
    createNew: 'Create New',
    targetCurrency: 'Target Currency',
    distributedCurrency: 'Distributed Currency',
    status: 'Status',
    exportDividendList: 'Export Dividend List',
    dividendName: 'Dividend Name',
    accumulateDividend: 'Accumulate Dividend',
    totalTargetBalance: 'Total Target Balance',
    interestRateType: 'Interest Rate Type',
    dividendRate: 'Dividend Rate',
    btnCodeList: 'Code List',
    btnDetail: 'Detail',
    btnCancel: 'Cancel',
    cancelDividendConfirm: 'Do you want cancel {dividendName}?',
    no: 'No',

    // Dividend Detail
    dividendDetail: 'Dividend Detail',
    maximumUsers: 'Maximum Users',
    joinedUser: 'Joined User',
    accumulatedDividend: 'Accumulated Dividend',
    lastDividend: 'Last Dividend',
    nextGuessDividend: 'Next Guess Dividend',
    maximumDividendAmount: 'Maximum Dividend Amount',
    dividendSpan: 'Dividend Span',
    dividendDate: 'Dividend Date',
    executingTime: 'Executing Time',
    startDate: 'Start Date',
    endDate: 'End Date',
    distributeType: 'Distribute Type',
    gift: 'Gift',
    unlimited: 'Unlimited',
    undecided: 'Undecided',
    dividendCondition: 'Dividend Condition',

    // Dividend New
    dividendNew: 'Create New Dividend',
    pleaseSelect: 'Please Select',
    unlimitedJoinedUserMaximum: 'Unlimited Maximum Users',
    giftAmount: 'Gift Amount',
    dividendUnlimitedEndDate: 'Undecided End Date',
    unlimitedDividendMaximum: 'Unlimited Maximum Dividend Amount',
    indicatedAmount: 'Indicated Amount',

    // Edit Dividend
    dividendEdit: 'Edit Dividend',

    // validate
    validateSchema: {
      dividend_name: {
        required: 'The dividend name field is required.',
        max: 'The dividend name field may not be greater than 80 characters.',
        check_exist: 'The dividend name already exist',
      },
      target_currency: {
        required: 'The target currency field is required.',
      },
      distributed_currency: {
        required: 'The distributed currency field is required.',
      },
      dividend_span: {
        required: 'The dividend span field is required.',
      },
      dividend_date_date: {
        required: 'The date field is required.',
      },
      start_date: {
        required: 'The date field is required.',
      },
      executing_time: {
        required: 'The executing time field is required.',
      },
      dividend_calculated_mode: {
        required: 'The interest rate type field is required.',
      },
      dividend_type: {
        required: 'The dividend type field is required.',
      },
      joined_user_maximum: {
        required: 'The maximum users field is required.',
        min: 'The maximum users field must be greater than 0',
      },
      gift_amount: {
        required: 'The gift amount field is required.',
      },
      gift_currency: {
        required: 'The gift currency field is required.',
      },
      dividend_date_month: {
        required: 'The month field is required.',
      },
      end_date: {
        required: 'The end date field is required.',
        min: 'The end date must be after the start date.',
      },
      dividend_maximum: {
        required: 'The maximum dividend amount field is required.',
        min: 'The maximum dividend amount field must be 0.00001 or more.',
      },
      indicated_amount: {
        required: 'The indicated amount field is required.',
      },
      dividend_rate: {
        required: 'The dividend rate field is required.',
        max: 'The dividend rate field must be 100 or less.',
        min: 'The dividend rate field must be 0.00001 or more.',
      },
      quantity: {
        required: 'The quantity field is required.',
        min: 'The quantity field must be 1 or more.',
        max: 'Quantity has exceeded',
      },
      codes: {
        required: 'The generate code field is required.',
      },
      unlimit_user: {
        required: 'The user field is required.',
        exist: 'The user already exist.',
      },
      input_code: {
        required: 'The input dividend code field is required.',
        invalid_code_exception: 'Dividend code is invalid.',
        code_has_been_used_exception: 'This dividend code has been used.',
        code_is_disabled_exception: 'Dividend code is disabled.',
        user_not_found_exception: 'This user not found.',
        user_has_been_banned_exception: 'This user has been banned.',
        user_has_been_disabled_exception: 'The account has been disabled.',
        campaign_is_inactive_exception: 'Campaign is inactive.',
        user_has_joined_campaign_already_exception:
          'This campaign has been registered.',
        user_balance_not_enough_exception:
          'Your balance is not enough to receive dividends.',
        user_has_been_deleted_exception: 'This user has been deleted.',
        campaign_is_cancelled_exception: 'The campaign was expired.',
        campaign_is_pending_exception: "The campaign hasn't been started.",
        campaign_is_ended_exception: 'The campaign was expired.',
      },
    },

    // Dividend Code List
    dividendCodeList: 'Dividend Code List',
    allocateStatus: 'Allocate Status',
    allocated: 'Allocated',
    dividendCode: 'Dividend Code',
    establishedDate: 'Established Date',
    user: 'User',
    enable: 'Enable',
    disable: 'Disable',
    toggleDividendCode: 'Do you want to {status} {code}?',
    exportFileError: 'Something went wrong or the export file is too large',

    // Dividend Code New
    dividendCodeNew: 'Create New Dividend Code',
    quantity: 'Quantity',
    remainingCodes: 'Remaining Codes',
    generate: 'Generate',

    // Dividend history
    dividendHistory: 'Dividend History',
    dividendAmount: 'Dividend',
    targetAmount: 'Target Amount',
    usdRate: 'USD Price of Dividend',
    endingBalance: 'Balance After Dividend',
    addDividendAt: 'Added dividend miss at {addDividendAt}',

    // Disable Dividend Screen
    disableDividendUser: 'Disable Dividend User',
    email: 'Email',
    disableDate: 'Disable Date',
    confirmDeleteUser: 'Do you want to delete {user} ?',

    // Input code
    dividendInfo: 'Dividend Information',
    inputCodeModalTitle: 'Input Dividend Code',
    inputCodeBtn: 'Input Dividend Code',
    verifyBtn: 'Verify',
    initialDate: 'Initial Date',
    dividendNote:
      '<strong>Note</strong>: If your balance is not enough, the dividend code will be invaid.',
    deleteCode: 'Do you want to delete {code}?',
    deleteCodeSuccess: 'Delete dividend code success',
  },
  hideItems: 'Hide {count} item(s)',
  showAll: 'Show all',
  confirmAction: 'Are you sure want to do this action?',
  userBalanceChangeScreen: {
    title: 'History User Balance Change',
    currency: 'Currency',
    transactionTypes: {
      ALL: 'All',
      MANUALLY: 'Manually',
      IMPORT_EXCEL: 'Import Excel',
    },
    no: 'No',
    email: 'Email',
    type: 'Type',
    amount: 'Amount',
    createdAt: 'Created At',
    exportFileError: 'Something went wrong or the export file is too large',
  },
  kyc: 'KYC',
  currentEmail: 'Current Email',
  emailConfirmation: 'Email Confirmation',
  futures: {
    common: {
      fromTo: 'Date',
      startDate: 'From',
      endDate: 'To',
      type: 'Type',
      side: 'Side',
      keyword: 'Keyword',
      createAt: 'Created at',
      userId: 'User ID',
      email: 'Email',
      total: 'Total',
      pair: 'Pair',
      status: 'Status',
      searchBy: 'Search By',
      allPair: 'All',
      orderId: 'Order Id',
      mode: 'Mode',
      leverage: 'Leverage',
      orderTypeOptions: {
        [OrderType.Market]: 'Market',
        [OrderType.Limit]: 'Limit',
        [OrderType.Liquidation]: 'Liquidation',
        [OrderType.TakeProfit]: 'TakeProfit',
        [OrderType.StopLoss]: 'StopLoss',
        [OrderType.CloseMarket]: 'CloseMarket',
        [OrderType.StopLimit]: 'StopLimit',
        [OrderType.StopMarket]: 'StopMarket',
      },
      orderSideOptions: {
        [OrderSide.Buy]: 'Buy',
        [OrderSide.Sell]: 'Sell',
      },
      amount: 'Amount',
      orderType: 'Order Type',
      orderSide: 'Order Side',
    },
    openPosition: {
      positionId: 'Position ID',
      sideOptions: {
        [PositionSide.Long]: 'Long',
        [PositionSide.Short]: 'Short',
      },
      entryPrice: 'Entry Price',
      unrealizedPnl: 'Unrealized Pnl',
      liquidationPrice: 'Liquidation Price',
      tp_sl: 'TP/SL',
    },
    orderHistory: {
      limitPrice: 'Limit Price',
      pnl: 'PNL',
      matchingPrice: 'Matching Price',
    },
    openOrder: {
      userType: 'User type',
      searchType: 'Search by',
      cancelOrders: 'Cancel Orders',
      reload: 'Reload',
      notificationSelectPrice:
        '* Filtered {side} order with price at {price} {currency}.',
      cancel: 'Cancel',
      cancelling: 'Cancelling',
      allUser: 'All',
      price: 'Price',
      orderMode: 'Order Mode',
      userTypeOptions: {
        [UserType.User]: 'User',
        [UserType.FutureCore]: 'Future Core',
        [UserType.BotP]: 'Bot P',
      },
      orderModeOptions: {
        [OrderMode.Isolate]: 'Isolate',
        [OrderMode.Cross]: 'Cross',
      },
      cancelSuccess: 'Cancel Orders Success',
      cancelError: 'Cancel Orders Failed',
      cancelEmptyWarning: 'Empty Cancel Orders',
    },
    setting: {
      binance: 'Binance',
      quicklyTurnAll: 'Quickly turn ON/OFF all',
      currentStatus: 'Current Status',
      addSymbol: 'Add Symbol',
      coin: 'Coin',
      currency: 'Currency',
      validate: {
        coin: 'Please select coin!',
        currency: 'Please select currency!',
      },
      createSymbolFailed: 'Create Symbol Failed',
      crawler: 'Crawler',
      orderbook: 'Orderbook',
      fee: 'Fee',
      markPrice: 'Mark Price',
      crawlerExternalPriceScale: 'Scale of External Price',
      crawlerExternalAmountScale: 'Scale of External Amount',
      crawlerAdjustmentRate: 'Adjustment Rate (Spread Rate)',
      crawlerMinAmount: 'Min Amount',
      obExternalLimitOrders: 'Limit External Orders on Orderbook',
      obAmountScale: 'Scale of Amount',
      obExternalMaxAmount: 'Max Merged Order Amount',
      obExternalMinAmount: 'Min Order Amount',
      obMinTotal: 'Min Total',
      obMaxTotal: 'Max Total',
      obDefaultPriceScale: 'Default Scale of Price',
      obListPriceScale: 'Scale of Price',
      orderFeeRate: 'Order Fee Rate',
      fundingRate: 'Funding Rate',
      insuranceFeeRate: 'Insurance Fee Rate',
      marginFeeRate: 'Margin Fee Rate',
      positionFeeRate: 'Position Fee Rate',
      maintenanceMarginRate: 'Maintenance Margin Rate',
      markPriceThresholdAdjustment: 'Threshold Adjustment',
      markPriceAvgTime: 'Process Avg Time',
      markPriceRandomOscillation: 'Random Oscillation',
      tradingMaxAmount: 'Max Size Position',
      tradingMinAmount: 'Min Size Position',
      tradingMaxTotal: 'Max Total',
      tradingMinTotal: 'Min Total',
      tradingPriceScale: 'Scale of Price',
      tradingAmountScale: 'Scale of Amount',
      tradingMinShortRate: 'Min Short Rate',
      tradingMaxLongRate: 'Max Long Rate',
      tradingListLeverage: 'Leverage',
      headerLeverage: 'Leverage (%)',
      headerMaxMarginByLeverage: 'Max Margin by Leverage ($)',
      update: 'Setting',
      delete: 'Delete',
      createDuplicateSymbol: 'Symbol was exist!',
      setPairFailed: 'Setup Pair Failed',
      setPairSuccess: 'Setup Pair Success',
      deletePairSuccess: 'Delete Pair Success',
      updateStatusAllPairsSuccess: 'Update Status All Pairs Success',
      updateStatusAllPairsFailed: 'Update Status All Pairs Failed',
    },
  },
  updateUserInfo: 'Update user info',
  convertSmallBalanceScreen: {
    // list screen
    convertSmallBalanceList: 'CASTLE Convert Setting',

    // setting
    pairSetting: 'Pair Setting',
    coin: 'Coin',
    status: 'ON/OFF',
    commonSetting: 'Common Setting',
    balanceAmount: 'Balance Amount',
    maximumConvertPerDay: 'Maximum Convert Per Day',
    fee: 'Fee',
    clearBtn: 'Clear',
    clearPopupTitle: 'Clear data change!',
    agreeClearBtn: 'OK, I want reset data',
    cancelClearBtn: 'Cancel',

    // validate
    validateSchema: {
      maximum_convert_amount_per_day: {
        required: 'The maximum convert amount per day field is required.',
        min: 'Input number must be greater than 0',
      },
      fee_value: {
        required: 'The fee value field is required.',
        max: 'The fee value field less than or equal 100',
        min: 'Input number must be greater than 0',
      },
      max_balance_amount: {
        required: 'The balance amout field is required.',
        min: 'Input number must be greater than 0',
      },
    },
  },
  swapSettingScreen: {
    title: 'Convert Setting',
    spotWallet: 'Spot Wallet',
    rewardWallet: 'Reward Wallet',
    addPair: 'Add Pair',
    settingType: 'Setting Type',
    minimumAmount: 'Minimum Amount',
    maximumAmount: 'Maximum Amount',
    maximumAmountPerDay: 'Maximum Amount Per Day',
    fee: 'Fee',
    feeWarning:
      '* Please enter transfer fee smaller than expected receivable amount of traders to avoid any problems accurred',
    minMaxFee: 'Min-Max Fee',
    selectSettingType: 'Please choose type',
    clearBtn: 'Clear',
    clearPopupTitle: 'Clear data change!',
    agreeClearBtn: 'OK, I want reset data',
    cancelClearBtn: 'Cancel',
    validateSchema: {
      minimum_amount: {
        required: 'The minimum amount field is required.',
        min: 'Input number must be greater than 0',
        min_fee:
          'The minimum amount must be equal to or greater than 4 times the min fee.',
      },
      maximum_amount: {
        required: 'The maximum amount field is required.',
        min_0: 'Input number must be greater than 0',
        min: 'The maximum amount must be greater than minimum amount.',
      },
      fee_value: {
        required: 'The fee value field is required.',
        max: 'The fee value field less than or equal 100',
        min: 'Input number must be greater than 0',
      },
      maximum_amount_per_day: {
        required: 'The maximum amount per day field is required.',
        min: 'The maximum amount per day must be equal to or greater than to the maximum amount.',
        min_0: 'Input number must be greater than 0',
      },
      minimum_fee_value: {
        min: 'Input number must be greater than 0',
        number: 'This field has number type',
      },
      maximum_fee_value: {
        min: 'Input number must be greater than 0',
        number: 'This field has number type',
      },
    },
  },
  convertSmallBalanceHistoryScreen: {
    title: 'CASTLE Convert History',
    no: 'No',
    date: 'Date',
    convertFee: 'CASTLE Convert Fee',
    castleReceived: 'CASTLE Received',
    coin: 'Coin',
    amount: 'Amount',
    fee: 'Fee (CASTLE)',

    exportFileError: 'Something went wrong or the export file is too large',
  },
  balanceTransferHistoryScreen: {
    title: 'Transfer History',
    from: 'From',
    to: 'To',
    time: 'Time',
    no: 'No',

    exportFileError: 'Something went wrong or the export file is too large',
  },
  balanceSwapHistoryScreen: {
    title: 'Convert History',
    from: 'From',
    to: 'To',
    time: 'Time',
    no: 'No',
    status: 'Status',
    walletType: 'Wallet Type',
    fee: 'Fee',
    rate: 'Rate',
    received: 'Received',

    exportFileError: 'Something went wrong or the export file is too large',
  },
  reload: 'Reload',
  appVersion: {
    deleteFailed: 'delete app version failed!',
    deleteSuccess: 'delete app version success!',
    confirmDelete: 'Do you want to delete this app version?',
    platform: 'Platform',
    version: 'Version',
    releaseDate: 'Release Date',
    changeLog: 'Change Log',
    forceUpdate: 'Force Update',
  },
}
