services:
  worker:
    container_name: worker
    image: notification-dev:1.0.0
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    command: npm run start:debug worker
    networks:
      - app_server
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - db
      - redis
      - mongo
  api:
    container_name: api
    image: notification-dev:1.0.0
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    command: npm run start:debug api
    ports:
      - ${LOCAL_PORT:-3003}:${SERVER_PORT:-3000}
    networks:
      - app_server
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - db
      - redis
  event-dispatcher:
    container_name: event-dispatcher
    image: notification-dev:1.0.0
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    command: npm run start:debug event-dispatcher
    networks:
      - app_server
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - db
      - redis
  # Database
  db:
    image: mariadb:latest
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    ports:
      - '3362:3306'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_MASTER_PASS}
      MYSQL_DATABASE: ${MYSQL_MASTER_DB}
      MYSQL_USER: ${MYSQL_MASTER_USER}
      MYSQL_PASSWORD: ${MYSQL_MASTER_PASS}
    networks:
      - app_server
  # phpmyadmin
  # phpmyadmin:
  #   depends_on:
  #     - db
  #   image: phpmyadmin/phpmyadmin
  #   restart: always
  #   ports:
  #     - '8084:80'
  #   environment:
  #     PMA_HOST: db
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_MASTER_PASS}
  #   networks:
  #     - app_server
  redis:
    image: redis:5-alpine
    volumes:
      - redis_data:/data
    ports:
      - '${REDIS_LOCAL_PORT:-6380}:${REDIS_PORT:-6379}'
    command: --port ${REDIS_PORT:-6379}
    restart: unless-stopped
    networks:
      - app_server
  grpc:
    container_name: grpc
    image: notification-dev:1.0.0
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    command: npm run start:debug grpc
    ports:
      - 2345:${GRPC_PORT:-3000}
    networks:
      - app_server
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - db
  scheduler:
    container_name: scheduler
    image: notification-dev:1.0.0
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    command: npm run start:debug scheduler
    networks:
      - app_server
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - db
      - redis
  commandline:
    container_name: commandline
    image: notification-dev:1.0.0
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    command: npm run start:debug commandline
    networks:
      - app_server
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - db
  mongo:
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
    networks:
      - app_server
networks:
  app_server:
volumes:
  db_data:
  mongo_data:
  redis_data:
  node_modules:
